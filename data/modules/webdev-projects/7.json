{
    "type": "project",
    "pages": [
        {
            "type": "information",
            "title": "Project Overview",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ Create a To-Do website built with React.JS which can let users add/remove things that they need to do"
                },
                {
                    "type": "text",
                    "content": "➔ Build this application with React components for each major part of the webpage"
                },
                {
                    "type": "text",
                    "content": "➔ Make this application look decent with some CSS!"
                },
                {
                    "type": "text",
                    "content": "➔ Lastly, we can host it on Replit so others can use it too!"
                }
            ]
        },
        {
            "type": "information",
            "title": "What is React?",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ JavaScript front-end framework"
                },
                {
                    "type": "text",
                    "content": "➔ Developed by Facebook"
                },
                {
                    "type": "text",
                    "content": "➔ Easier to display dynamic content compared to Vanilla JS"
                },
                {
                    "type": "text",
                    "content": "➔ Changes info dynamically, allowing users to repeat HTML code for several purposes"
                }
            ]
        },
        {
            "type": "information",
            "title": "What is React?",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ In HTML, to update text, you would have to query the element in JS and then change it."
                },
                {
                    "type": "text",
                    "content": "➔ With React, you only need to change one variable to update the text!"
                },
                {
                    "type": "text",
                    "content": "➔ In HTML, it’s hard to reuse code, while in React, just create Components! "
                },
                {
                    "type": "image",
                    "src": "/data/modules/webdev-projects-assets/img9/0-0.png",
                    "width": "60%"
                }
            ]
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Getting everything ready[[/]]"
                },
                {
                    "type": "text",
                    "content": "We want our React app to have two major components: The item displayer/remover and the item adder. Something like below"
                },
                {
                    "type": "image",
                    "src": "/data/modules/webdev-projects-assets/img9/1-0.png",
                    "width": "60%",
                    "max-width": "20vw"
                },
                {
                    "type": "text",
                    "content": "So, to kick things off, let’s create two components called addItem.jsx and itemList.jsx and import them into our project. "
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Item List Component[[/]]"
                },
                {
                    "type": "text",
                    "content": "Inside the Item List component, let’s loop over a prop named “list”"
                },
                {
                    "type": "text",
                    "content": "Inside, just create a div with key of element.key and contents of element.itemName"
                },
                {
                    "type": "code",
                    "content": "class parent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return this.props.list.map((element) => {\n      return (\n        <div key={element.key}>\n          {element.itemName}\n        </div>\n      )\n    })\n  }\n}\nexport default parent;",
                    "name": "itemList.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Item List component (testing)[[/]]"
                },
                {
                    "type": "text",
                    "content": "To test our component, first go to main.jsx and import the module if you haven’t already."
                },
                {
                    "type": "text",
                    "content": "Then, pass the “list” prop to it which contains an array of things. (We’ll be changing this later to handle use input)"
                },
                {
                    "type": "code",
                    "content": "import React from 'react'\nimport ItemList from './itemList.jsx'\n\nvar items = [\n  {key: \"1\", itemName: \"Do math homework\"},\n  {key: \"2\", itemName: \"Buy groceries\"},\n  {key: \"3\", itemName: \"Clean the house\"}\n]\n\nReactDOM.render(\n  <div>\n    <ItemList list={items}/>\n  </div>,\n  document.getElementById('root')\n)",
                    "name": "itemList.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Add Item Component[[/]]"
                },
                {
                    "type": "text",
                    "content": "➔ First, create an input element with a ref"
                },
                {
                    "type": "text",
                    "content": "➔ Then, create a button that runs a function "
                },
                {
                    "type": "text",
                    "content": "➔ “addItem” when clicked"
                },
                {
                    "type": "text",
                    "content": "➔ If you don’t know any of these, it’s highly recommended to view the instruction slides, but here’s the code for your convenience"
                },
                {
                    "type": "code",
                    "content": "class infoDisplayer extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.addItem = this.addItem.bind(this);\n    this.addInput = React.createRef();\n  }\n\n  addItem() {}\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Add a new task\"\n          ref={this.addInput}>\n        </input>\n        <button onClick={this.addItem}>Add!</button>\n      </div>\n    )\n  }\n}\n\nexport default infoDisplayer",
                    "name": "addItem.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "information",
            "title": "Rain Check",
            "elements": [
                {
                    "type": "text",
                    "content": "Let’s make sure everything’s going as planned"
                },
                {
                    "type": "text",
                    "content": "➔ This should be what you see when you run your webapp!"
                },
                {
                    "type": "image",
                    "src": "/data/modules/webdev-projects-assets/img9/2-0.png"
                }
            ]
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ For the main parent to receive updates whenever a user clicks “update,” we need to change the main page to a class. "
                },
                {
                    "type": "text",
                    "content": "➔ Then, we can create a callback function and pass it down to the child"
                },
                {
                    "type": "text",
                    "content": "➔ In our case, the callback function is called “callBackFunction” (creative, right?). We then pass this to the AddItem component through a prop called “callback”"
                },
                {
                    "type": "code",
                    "content": "import React from 'react'\nimport ItemList from './itemList.jsx'\nimport AddItem from './addItem.jsx';\n\nvar items = [\n  {key: \"1\", itemName: \"Do math homework\"},\n  {key: \"2\", itemName: \"Buy groceries\"},\n  {key: \"3\", itemName: \"Clean the house\"}\n]\n\nclass MainPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.callBackFunction = this.callBackFunction.bind(this);\n  }\n  callBackFunction(data) {\n    console.log(\"Changed!\", data)\n  }\n\n  render() {\n    return (\n      <div>\n        <ItemList list={items}/>\n        <AddItem callBack={this.callBackFunction} />\n      </div>\n    )\n  }\n}\nReactDOM.render(\n  <MainPage />,\n  document.getElementById('root')\n)",
                    "lang": "jsx",
                    "name": "main.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Accessing the callback[[/]]"
                },
                {
                    "type": "text",
                    "content": "➔ To access the callback function made available to us in the previous slide, access the prop named “callBack” and then run it with a parameter with a value of whatever’s in the textbox"
                },
                {
                    "type": "text",
                    "content": "➔ Now, we can add something in the text box, and it will log it into the console!"
                },
                {
                    "type": "image",
                    "src": "/data/modules/webdev-projects-assets/img9/3-0.png"
                },
                {
                    "type": "code",
                    "content": "class infoDisplayer extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.addItem = this.addItem.bind(this);\n    this.addInput = React.createRef();\n  }\n\n  addItem() {\n    this.props.callBack(this.addInput.current.value)\n    this.addInput.current.value = \"\"\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Add a new task\"\n          ref={this.addInput}>\n        </input>\n        <button onClick={this.addItem}>Add!</button>\n      </div>\n    )\n  }\n}\n\nexport default infoDisplayer",
                    "name": "addItem.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Updating the list[[/]]"
                },
                {
                    "type": "text",
                    "content": "➔ To make the list update every time a user inputs a new item, we need to use React States"
                },
                {
                    "type": "text",
                    "content": "➔ Create a React State named “items” and inside it, put our previous “items” variable"
                },
                {
                    "type": "text",
                    "content": "➔ Then, pass this React State to the ItemList component. Then, everytime the callback function is called, add a new element to that array and update the state!"
                },
                {
                    "type": "code",
                    "content": "import React from 'react'\nimport ItemList from './itemList.jsx'\nimport AddItem from './addItem.jsx';\n\nclass MainPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.callBackFunction = this.callBackFunction.bind(this);\n    this.state = {\n      items: []\n    }\n  }\n  callBackFunction(data) {\n    console.log(\"Added!\", data)\n    let newElement = {\n      key: (this.state.items.length).toString(),\n      itemName: data\n    }\n    this.state.items.push(newElement)\n    this.setState({\n      items: this.state.items\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <ItemList list={this.state.items} callBack={this.deleteCallBack}/>\n        <AddItem callBack={this.callBackFunction} />\n      </div>\n    )\n  }\n}\nReactDOM.render(\n  <MainPage />,\n  document.getElementById('root')\n)",
                    "name": "main.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Making delete buttons[[/]]"
                },
                {
                    "type": "text",
                    "content": "We’re almost there! We just need to make the delete buttons so users can delete items!"
                },
                {
                    "type": "text",
                    "content": "➔ First, add an X element and style it as you wish."
                },
                {
                    "type": "text",
                    "content": "➔ Then, create a function named “deleteItem” that runs a callback with a key."
                },
                {
                    "type": "text",
                    "content": "➔ Lastly, add an onClick listener that runs this function with it’s key."
                },
                {
                    "type": "code",
                    "content": "class parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.deleteItem = this.deleteItem.bind(this)\n  }\n\n  deleteItem(key){\n    this.props.callBack(key)\n  }\n\n  render() {\n    return this.props.list.map((element) => {\n      return (\n        <div key={element.key}>\n          {element.itemName}\n          <span\n            style={{ color: \"red\", marginLeft: \"100px\", cursor: \"pointer\" }}\n            onClick={() => this.deleteItem(element.key)}\n          >X</span>\n        </div>\n      )\n    })\n  }\n}\nexport default parent;",
                    "name": "itemList.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Last step! Updating main.jsx[[/]]"
                },
                {
                    "type": "text",
                    "content": "Great! We just need to do one more thing! Add the callback functions in main.jsx"
                },
                {
                    "type": "text",
                    "content": "➔ First, create a function called “deleteCallback” that takes the parameter “key” that when called, deletes that index from the array with the “splice” function. Lastly, update the item state"
                },
                {
                    "type": "text",
                    "content": "➔ Then, pass this function as a prop named “callBack” to “itemList.jsx”"
                },
                {
                    "type": "code",
                    "content": "import React from 'react'\nimport ItemList from './itemList.jsx'\nimport AddItem from './addItem.jsx';\n\nclass MainPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.callBackFunction = this.callBackFunction.bind(this);\n    this.deleteCallBack = this.deleteCallBack.bind(this)\n    this.state = {\n      items: []\n    }\n  }\n  callBackFunction(data) {\n    console.log(\"Added!\", data)\n    let newElement = {\n      key: (this.state.items.length).toString(),\n      itemName: data\n    }\n    this.state.items.push(newElement)\n    this.setState({\n      items: this.state.items\n    })\n  }\n\n  deleteCallBack(key){\n    console.log(\"Deleted!\", key)\n\n    this.state.items.splice(key, 1)\n    this.setState({\n      items: this.state.items\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <ItemList list={this.state.items} callBack={this.deleteCallBack}/>\n        <AddItem callBack={this.callBackFunction} />\n      </div>\n    )\n  }\n}\nReactDOM.render(\n  <MainPage />,\n  document.getElementById('root')\n)",
                    "name": "main.jsx",
                    "lang": "jsx"
                }
            ],
            "hints": [],
            "validation": [
                {
                    "validate": true,
                    "type": "validate-dom",
                    "actions": [
                        {
                            "run": "webdev-7-0-0.jsx",
                            "editorIndex": 0
                        },
                        {
                            "execOnDOM": "document.querySelector('input').value = 'test #1'"
                        },
                        {
                            "execOnDOM": "document.querySelector('button').click()"
                        },
                        {
                            "checkDOM": "test #1X",
                            "command": "document.querySelector('#root > div > div:nth-child(1)').innerText",
                            "onerror": "The button Add button did not work, or there was no \"X\" delete button"
                        }
                    ]
                }
            ],
            "points": 0,
            "coins": 0
        }
    ]
}