{"type":"lesson","pages":[{"type":"information","title":"Week 5 - Intro to Node.js","elements":[{"type":"text","content":"[[b]]What is Node.js[[/]]\n➔ Runtime environment for Javascript\n➔ Backend code with JavaScript\n➔ Common frontend and backend language"},{"type":"divider"},{"type":"image","src":"/data/modules/webdev-assets/img4/1-0.png","width":"40%"}]},{"type":"information","title":"Week 5 - NPM","elements":[{"type":"text","content":"[[b]]Package management is an important aspect of backend development. [[/]]\nIntroducing [[b]]NPM (Node Package Manager)[[/]]. NPM allows you to use other people's code packages in your code.\n➔ Allows you to use other people's code packages\n➔ Allows you to manage projects and dependencies\n➔ Uses the command line"},{"type":"code","content":"npm install <package name>"}]},{"type":"information","title":"Week 5 - Node Project Management","elements":[{"type":"text","content":"NPM provides utilities to create and manage your own Node project. Lets create a Node.js project and install the [[monospace]]file-system[[/]] package.\n1. Run [[monospace]]npm init[[/]](to skip prompts, add flag [[monospace]]-y[[/]].\n2. Run [[monospace]]npm install file-system[[/]] to install the file-system package. \nWe now have a node project created. A package-lock.json file is now created, that contains the version specifications for installed libraries. The node_modules directory has your copy of the source files of the installed libraries.\nNow, we must run our code to see if it actually works. In contrast to JavaScript, you run code using the [[monospace]]node[[/]] command, rather than through the browser."},{"type":"code","content":"node filename.js"}]},{"type":"information","title":"Week 5 - CommonJS Modules","elements":[{"type":"text","content":"In order to use the package we just installed, we need to import it in our code. To do that we can use CommonJS modules or ES6 modules. ES6 modules are more complicated, so we will use CommonJS. We are creating a constant variable called fs, and assigning it to the return value of the require function. Now, our fs variable has all the functions and properties so that we can start to read and write files using JavaScript."},{"type":"code","content":"const fs = require('file-system');"},{"type":"text","content":"In order to move on, we need to first understand paths on your computer. When working with projects, we usually use relative paths. Relative paths look something like this"},{"type":"code","content":"\"file.txt\"\n\"./file.txt\"\n\"../file.txt\""},{"type":"text","content":"If a folder is in the same directory you can just specify the file name or ./filename. If a folder is outside your current directory, use ../filename\nWhy use modules? Sometimes you want to put functions into other files to reduce the clutter. You can create another file and add your functions there. Through [[monospace]]module.exports[[/]], functions can be exported to be used in other files."},{"type":"code","content":"module.exports.greet = (name) => { console.log(`Hello ${name}`) };"}]},{"type":"multiple_choice","question":"Which of the following is Node.js primarily used for?","answers":["Styling documents","Writing frontend code","Writing backend code","Styling code"],"correct":2,"descriptions":["Incorrect! CSS is used for styling documents","Incorrect! HTML, CSS, and regular JavaScript is used for frontend","Correct! Good job.","Incorrect, try again."],"points":5,"coins":1},{"type":"short_answer","question":"If util.js is in the parent directory, how what is its relative path?","answers":["../util.js"],"correct":2,"descriptions":{"util.js":"Incorrect. This would work if util.js was in the current directory","./util.js":"Incorrect. This would work if util.js was in the current directory","../util.js":"Correct! The \"..\" means parent directory."},"description_default":"How do you access parent directories? How do you access a file inside a directory?","points":10,"coins":1},{"type":"multiple_choice","question":"How are Node.js scripts run?","answers":["command line","browser","java","html"],"correct":0,"descriptions":["Correct! Well done.","Incorrect. Regular JavaScript is tested through the browser","Incorrect. Java is completely unrelated to Node.js and JavaScript","Incorrect. Regular JavaScript is usually tested through HTML"]},{"type":"congratulations","title":"Congratulations!","elements":[{"type":"text","content":"In this module, you learned what is Node.js, a popular runtime environment for Javascript.\nYou also learned how to manage packages and projects through Node Package Manager, aka NPM."},{"type":"code","content":"npm install <package>"},{"type":"text","content":"You learned how to execute Node.js code"},{"type":"code","content":"node <filename>"},{"type":"text","content":"You learned how to import installed libraries."},{"type":"code","content":"const fs = require('file-system')"},{"type":"text","content":"You learned how to export functions in Node."},{"type":"code","content":"module.exports.greet = (name) => {console.log(`hello ${name}`)}"},{"type":"text","content":"Lastly, you how to use about relative paths."},{"type":"code","content":"require('../file.js').greet"}]}]}