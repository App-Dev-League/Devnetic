{"type":"lesson","pages":[{"type":"information","title":"Week 8 - Advanced React.JS/JSX","elements":[{"type":"text","content":"[[h3]]Why React?[[/]]\n➔ React.JS makes it easy to reuse components of a website (navbar, footer, etc.)\n➔ React brings the benefits of Node.JS into the frontend. You can use any NPM package you want!\n➔ React.JS makes it easy to make fast updates to a website (like displaying stock market data)"},{"type":"image","src":"/data/modules/webdev-assets/img7/0-0.png"},{"type":"divider"},{"type":"text","content":"[[h3]]React Components[[/]]\n➔ React components allow for us to quickly re-use common components (like a navbar)\n➔ When you are writing code inside of a component, you can treat it like it’s own HTML website! (If you have a class named “hello” in one component, but also another element with the “hello” class in a different component, they will not interfere with one another.\n➔ Components are a bit like Javascript functions. You can pass parameters in by using React “props”, and you [[`]]return[[/]] the HTML/JSX code!"}]},{"type":"information","title":"Week 8 - Creating your first React Component","elements":[{"type":"text","content":"➔ Once you navigate to your replit, replicate the filesystem to the right. Mainly, pay attention to the “components” folder - this is where we’ll be putting all of our components\n➔ After this, navigate to the “header.jsx” file and import the React module and the header.module.css file.\n➔ Then, create a function with a return function inside returning some HTML! Once you’re satisfied, export the function, (since remember, this is treated as a JS module)\n➔ If you don’t see anything yet, don’t worry. We still need to navigate to “main.jsx” and import the “Header” module and stick it into the DOM."},{"type":"image","src":"/data/modules/webdev-assets/img7/1-0.png"}]},{"type":"information","title":"Week 8 - Passing parameters (props) into your React component","elements":[{"type":"text","content":"➔ To further increase a component’s reusability, pass parameters using react props\n➔ In a function, props can be accessed in the first function parameter.\n➔ To pass a prop to a component, use the component with a HTML attribute. For example, [[`]]<Navbar mood=“hi”/>[[/]]"},{"type":"image","src":"/data/modules/webdev-assets/img7/2-0.png"}]},{"type":"information","title":"Week 8 - React classes/lifecycles","elements":[{"type":"text","content":"➔ Let’s take a quick detour and talk about React.JS classes. While functions get the job done easily, they don’t allow for much customization. \n➔ In React Classes, the declaratory syntax is"},{"type":"code","content":"class yourName extends React.Component {}"},{"type":"text","content":"➔ In React Classes, there are many methods, and most notably:\n[[ ]][[ ]]◆ [[`]]constructor(props)[[/]] allows you to get/set props/states/anything in the “this” variable\n[[ ]][[ ]]◆ [[`]]componentDidMount()[[/]] allows you to run JS when as soon as the component is rendered for the first time  - This is a [[red]]lifecycle method[[/]]\n[[ ]][[ ]]◆ [[`]]componentWillUnmount()[[/]] allows you to run JS (to free up resources) when the component is about to be removed - This is a [[red]]lifecycle method[[/]]\n[[ ]][[ ]]◆ [[`]]render()[[/]] - what you put your return [html] statement in"},{"type":"image","src":"/data/modules/webdev-assets/img7/3-0.png","width":"60%"}]},{"type":"multiple_choice","question":"What is the method that runs when the component is first rendered?","code_template":"________(){\n    // run when component is first rendered\n}","answers":["componentWillMount()","componentHasMounted()","componentDidMount()","componentMounted()"],"correct":2,"descriptions":["Incorrect. This is method is run right after the component is rendered for the first time.","Incorrect. This is not the correct syntax","Correct! This is the correct syntax","Incorrect. This is not the correct syntax"],"points":5,"coins":1},{"type":"information","title":"Week 8 - React states","elements":[{"type":"text","content":"➔ React states allow for us to quickly update text in the DOM without manually forcing React to re-render.\n➔ In the “constructor” method inside of React classes, you can add "},{"type":"code","content":"this.state = {“a JS object key”: “a value”};"},{"type":"text","content":"[[ ]][[ ]]◆ You can ONLY add new keys/values to the “state” object in the constructor!\n➔ To update something in the “state” variable, use [[`]]this.setState({“key”: “new value”});[[/]]\n➔ To read something in the “state” variable, use [[`]]this.state[“your key”][[/]]\n[[ ]][[ ]]◆ (Note: you cannot use this method to update the “state” variable)"},{"type":"image","src":"/data/modules/webdev-assets/img7/4-0.png"},{"type":"divider"},{"type":"text","content":"React States (In Functional Components)\n➔ This creates two variables, one is the state itself, and the other is the function used to set new values to that state"},{"type":"code","content":"const [count, setCount] = useState(0);"}]},{"type":"short_answer","question":"How would run the following Pseudocode? (In a class component)","code_template":"set-state of \"time\" to 10","answers":["this.setState({\"time\": 10})","this.setState({\"time\":10})","this.setState({time:10})","this.setState({time: 10})"],"descriptions":{"this.setState({\"time\": 10})":"Correct! This is the correct syntax for setting state in class components","this.setState({\"time\":10})":"Correct! This is the correct syntax for setting state in class components."},"description_default":"remember you must use the \"this\" variable and the \"setState\" method","points":10,"coins":3},{"type":"information","title":"Week 8 - Handling events in React","elements":[{"type":"text","content":"➔ In React.JS, handling events is very similar to HTML. For example, [[`]]onclick=“myFunction()”[[/]] becomes [[`]]onClick={myFunction}[[/]]\n➔ All event handlers become camelCased, (onscroll -> onScroll)\n➔ If the current component is a class, then the event handler becomes [[`]]onclick={this.myFunction}[[/]] You will also need to bind the function in the constructor of the class with [[`]]this.myFunction = this.myFunction.bind(this)[[/]]. (We bind “this” to the function so the function will be able to access the correct “this” variable). Then, define the function as [[`]]myFunction() {yourStuff;}[[/]] \n➔ Preventing default actions in React.JS is different than HTML. In React.JS, you have to add [[`]]event.preventDefault();[[/]] in the function that is being called."},{"type":"image","src":"/data/modules/webdev-assets/img7/5-0.png"}]},{"type":"information","title":"Week 8 - React repetitions and keys","elements":[{"type":"text","content":"➔ In React, you can easily make lists with a for-loop! (kinda)\n➔ To get started, first create an array of items \n➔ ([[`]]var things = [“hi”, “foo”, “bar”, “hello”][[/]]) inside of the “render” method in a component\n➔ The array.map function allows us to loop through an array and get all of the values. We can apply the to React too, and loop through an array of items and render them!\n➔ Use [[`]]things.map((thing, index) => {<h1 key={index}>{thing}</h1>})[[/]] to loop through the “things” array "},{"type":"code","content":"render() {\n\tvar things = [\"hi\", \"foo\", \"bar\", \"hello\"]\n\treturn (\n\t\tthings.map((thing) => {\n\t\t\t<h1 key={thing}>{thing}</h1>\n\t\t}) \n\t)\n}"},{"type":"text","content":"    Note! The element that you are repetitively looping over needs a “key” attribute. This can be anything you want, just make sure it’s unique. You can then use the key later to get the element"}]},{"type":"information","title":"Week 8 - React.JS forms","elements":[{"type":"text","content":"➔ React.JS forms are quite different from traditional HTML forms. React forms essential work by updating the component state every time an input changes, and when the user clicks the submit button, it takes the states and you can do things with the data stored in the states\n➔ For example, let’s create a form with a submit handler of [[`]]{this.handleSubmit}[[/]]\n➔ Next, let’s create an HTML text input box with the current state bound to it’s “value” attribute, and an onChange handler of [[`]]{this.handleChange}[[/]] \n➔ Finally, let’s create an HTML submit button with a value of “submit button”\n➔ We’re not out of the woods yet! We still need to create the [[`]]states[[/]] variable, and create the two [[`]]handleSubmit[[/]] and [[`]]handleChange[[/]] functions."},{"type":"code","content":"class navbar extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { value: '' };\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\thandleChange(event) {\n\t\tthis.setState({ value: event.target.value });\n\t}\n\thandleSubmit(event) {\n\t\talert(this.state.value);\n\t\tevent.preventDefault();\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t<input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n\t\t\t\t<input type=\"submit\" value=\"Submit Button\" />\n\t\t\t</form>\n\t\t);\n\t}\n}","lang":"jsx"}]},{"type":"information","title":"Week 8 - Lifting React states (making states more global)","elements":[{"type":"text","content":"➔ Sometimes, in React, you may want to make one state available to more than one component. (You want one component to change another’s text)\n➔ This can be accomplished by raising React states. There’s no new special syntax here, it’s just the concept. \n➔ To accomplish this, first create a parent component. This will store all of the states. Next, bind and create a function called [[`]]handleChanges(changes)[[/]] Inside this, make it update a state (any state) based off of changes. Lastly, create a state in this component with a key called [[`]]value.[[/]]"},{"type":"code","content":"class parent extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleChanges = this.handleChanges.bind(this);\n\t\tthis.state = { value: 'something' };\n\t}\n\thandleChanges(newValue) {\n\t\tthis.setState({ value: newValue });\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Component1 onChangeParent={this.handleChanges} />\n\t\t\t</div>\n\t\t);\n\t}\n}","name":"Parent Component","lang":"jsx"},{"type":"text","content":"➔ Finally, import and use a non-existent (for now) component called component1. Pass a prop to it called [[`]]onChangeParent[[/]] with value of [[`]]{this.handleChanges}[[/]] \n➔ Congrats! Now, inside component1, once you call [[`]]this.props.onChangeParent(“newStateValue”)[[/]], it will update the states in the parent component!"},{"type":"code","content":"class Component1 extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\trender() {\n\t\tthis.props.onChangeParent(\"newStateValue\")\n\t\treturn;\n\t}\n}","lang":"jsx","name":"Child Component"}]}]}