{
    "type": "project",
    "pages": [
        {
            "type": "information",
            "title": "Week 8 Project - To Do List with React Components",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ Create a To-Do website built with React.JS which can let users add/remove things that they need to do\n➔ Build this application with React components for each major part of the webpage\n➔ Make this application look decent with some CSS!\n➔ Lastly, we can host it on Replit so others can use it too!"
                }
            ]
        },
        {
            "type": "information",
            "title": "What is React?",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ JavaScript front-end framework\n➔ Developed by Facebook\n➔ Easier to display dynamic content compared to Vanilla JS\n➔ Changes info dynamically, allowing users to repeat HTML code for several purposes"
                }
            ]
        },
        {
            "type": "information",
            "title": "What is React?",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ In HTML, to update text, you would have to query the element in JS and then change it.\n➔ With React, you only need to change one variable to update the text!\n➔ In HTML, it’s hard to reuse code, while in React, just create Components! "
                },
                {
                    "type": "image",
                    "src": "./data/modules/webdev-projects-assets/img9/0-0.png",
                    "width": "60%"
                }
            ]
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Getting everything ready[[/]]\nWe want our React app to have two major components: The item displayer/remover and the item adder. Something like below"
                },
                {
                    "type": "image",
                    "src": "./data/modules/webdev-projects-assets/img9/1-0.png",
                    "width": "60%",
                    "max-width": "20vw"
                },
                {
                    "type": "text",
                    "content": "So, to kick things off, let’s create two components called addItem.jsx and itemList.jsx and import them into our project. "
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Item List Component[[/]]\nInside the Item List component, let’s loop over a prop named “list”\nInside, just create a div with key of element.key and contents of element.itemName"
                },
                {
                    "type": "code",
                    "content": "class parent extends React.Component {\n\tconstructor(props) {\n\tsuper(props);\n\t}\n\n\trender() {\n\treturn this.props.list.map((element) => {\n\t\treturn (\n\t\t<div key={element.key}>\n\t\t\t{element.itemName}\n\t\t</div>\n\t\t)\n\t})\n\t}\n}\nexport default parent;",
                    "name": "itemList.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Item List component (testing)[[/]]\nTo test our component, first go to main.jsx and import the module if you haven’t already.\nThen, pass the “list” prop to it which contains an array of things. (We’ll be changing this later to handle use input)"
                },
                {
                    "type": "code",
                    "content": "import React from 'react'\nimport ItemList from './itemList.jsx'\n\nvar items = [\n\t{key: \"1\", itemName: \"Do math homework\"},\n\t{key: \"2\", itemName: \"Buy groceries\"},\n\t{key: \"3\", itemName: \"Clean the house\"}\n]\n\nReactDOM.render(\n\t<div>\n\t<ItemList list={items}/>\n\t</div>,\n\tdocument.getElementById('root')\n)",
                    "name": "itemList.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Add Item Component[[/]]\n➔ First, create an input element with a ref\n➔ Then, create a button that runs a function \n➔ “addItem” when clicked\n➔ If you don’t know any of these, it’s highly recommended to view the instruction slides, but here’s the code for your convenience"
                },
                {
                    "type": "code",
                    "content": "class infoDisplayer extends React.Component {\n\n\tconstructor(props) {\n\tsuper(props);\n\tthis.addItem = this.addItem.bind(this);\n\tthis.addInput = React.createRef();\n\t}\n\n\taddItem() {}\n\n\trender() {\n\treturn (\n\t\t<div>\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tplaceholder=\"Add a new task\"\n\t\t\tref={this.addInput}>\n\t\t</input>\n\t\t<button onClick={this.addItem}>Add!</button>\n\t\t</div>\n\t)\n\t}\n}\n\nexport default infoDisplayer",
                    "name": "addItem.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "information",
            "title": "Rain Check",
            "elements": [
                {
                    "type": "text",
                    "content": "Let’s make sure everything’s going as planned\n➔ This should be what you see when you run your webapp!"
                },
                {
                    "type": "image",
                    "src": "./data/modules/webdev-projects-assets/img9/2-0.png"
                }
            ]
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ For the main parent to receive updates whenever a user clicks “update,” we need to change the main page to a class. \n➔ Then, we can create a callback function and pass it down to the child\n➔ In our case, the callback function is called “callBackFunction” (creative, right?). We then pass this to the AddItem component through a prop called “callback”"
                },
                {
                    "type": "code",
                    "content": "import React from 'react'\nimport ItemList from './itemList.jsx'\nimport AddItem from './addItem.jsx';\n\nvar items = [\n\t{key: \"1\", itemName: \"Do math homework\"},\n\t{key: \"2\", itemName: \"Buy groceries\"},\n\t{key: \"3\", itemName: \"Clean the house\"}\n]\n\nclass MainPage extends React.Component {\n\tconstructor(props) {\n\tsuper(props);\n\tthis.callBackFunction = this.callBackFunction.bind(this);\n\t}\n\tcallBackFunction(data) {\n\tconsole.log(\"Changed!\", data)\n\t}\n\n\trender() {\n\treturn (\n\t\t<div>\n\t\t<ItemList list={items}/>\n\t\t<AddItem callBack={this.callBackFunction} />\n\t\t</div>\n\t)\n\t}\n}\nReactDOM.render(\n\t<MainPage />,\n\tdocument.getElementById('root')\n)",
                    "lang": "jsx",
                    "name": "main.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Accessing the callback[[/]]\n➔ To access the callback function made available to us in the previous slide, access the prop named “callBack” and then run it with a parameter with a value of whatever’s in the textbox\n➔ Now, we can add something in the text box, and it will log it into the console!"
                },
                {
                    "type": "image",
                    "src": "./data/modules/webdev-projects-assets/img9/3-0.png"
                },
                {
                    "type": "code",
                    "content": "class infoDisplayer extends React.Component {\n\n\tconstructor(props) {\n\tsuper(props);\n\tthis.addItem = this.addItem.bind(this);\n\tthis.addInput = React.createRef();\n\t}\n\n\taddItem() {\n\tthis.props.callBack(this.addInput.current.value)\n\tthis.addInput.current.value = \"\"\n\t}\n\n\trender() {\n\treturn (\n\t\t<div>\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tplaceholder=\"Add a new task\"\n\t\t\tref={this.addInput}>\n\t\t</input>\n\t\t<button onClick={this.addItem}>Add!</button>\n\t\t</div>\n\t)\n\t}\n}\n\nexport default infoDisplayer",
                    "name": "addItem.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Updating the list[[/]]\n➔ To make the list update every time a user inputs a new item, we need to use React States\n➔ Create a React State named “items” and inside it, put our previous “items” variable\n➔ Then, pass this React State to the ItemList component. Then, every time the callback function is called, add a new element to that array and update the state!"
                },
                {
                    "type": "code",
                    "content": "import React from 'react'\nimport ItemList from './itemList.jsx'\nimport AddItem from './addItem.jsx';\n\nclass MainPage extends React.Component {\n\tconstructor(props) {\n\tsuper(props);\n\tthis.callBackFunction = this.callBackFunction.bind(this);\n\tthis.state = {\n\t\titems: []\n\t}\n\t}\n\tcallBackFunction(data) {\n\tconsole.log(\"Added!\", data)\n\tlet newElement = {\n\t\tkey: (this.state.items.length).toString(),\n\t\titemName: data\n\t}\n\tthis.state.items.push(newElement)\n\tthis.setState({\n\t\titems: this.state.items\n\t})\n\t}\n\n\trender() {\n\treturn (\n\t\t<div>\n\t\t<ItemList list={this.state.items} callBack={this.deleteCallBack}/>\n\t\t<AddItem callBack={this.callBackFunction} />\n\t\t</div>\n\t)\n\t}\n}\nReactDOM.render(\n\t<MainPage />,\n\tdocument.getElementById('root')\n)",
                    "name": "main.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Making delete buttons[[/]]\nWe’re almost there! We just need to make the delete buttons so users can delete items!\n➔ First, add an X element and style it as you wish.\n➔ Then, create a function named “deleteItem” that runs a callback with a key.\n➔ Lastly, add an onClick listener that runs this function with it’s key."
                },
                {
                    "type": "code",
                    "content": "class parent extends React.Component {\n\tconstructor(props) {\n\tsuper(props);\n\tthis.deleteItem = this.deleteItem.bind(this)\n\t}\n\n\tdeleteItem(key){\n\tthis.props.callBack(key)\n\t}\n\n\trender() {\n\treturn this.props.list.map((element) => {\n\t\treturn (\n\t\t<div key={element.key}>\n\t\t\t{element.itemName}\n\t\t\t<span\n\t\t\tstyle={{ color: \"red\", marginLeft: \"100px\", cursor: \"pointer\" }}\n\t\t\tonClick={() => this.deleteItem(element.key)}\n\t\t\t>X</span>\n\t\t</div>\n\t\t)\n\t})\n\t}\n}\nexport default parent;",
                    "name": "itemList.jsx"
                }
            ],
            "hints": [],
            "validation": [],
            "points": 0,
            "coins": 0
        },
        {
            "type": "code_editor",
            "storage_id": [
                "webdev-7-0-0.jsx",
                "webdev-7-0-1.jsx",
                "webdev-7-0-2.jsx"
            ],
            "files": [
                "main.jsx",
                "addItem.jsx",
                "itemList.jsx"
            ],
            "default": [
                "// The dom container's element ID is root\nconst domContainer = document.querySelector('#root');",
                "// Export any React components that you want to use in the app\nexport default YourComponent;",
                "// Export any React components that you want to use in the app\nexport default YourComponent;"
            ],
            "display_type": "web",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Last step! Updating main.jsx[[/]]\nGreat! We just need to do one more thing! Add the callback functions in main.jsx\n➔ First, create a function called “deleteCallback” that takes the parameter “key” that when called, deletes that index from the array with the “splice” function. Lastly, update the item state\n➔ Then, pass this function as a prop named “callBack” to “itemList.jsx”"
                },
                {
                    "type": "code",
                    "content": "import React from 'react'\nimport ItemList from './itemList.jsx'\nimport AddItem from './addItem.jsx';\n\nclass MainPage extends React.Component {\n\tconstructor(props) {\n\tsuper(props);\n\tthis.callBackFunction = this.callBackFunction.bind(this);\n\tthis.deleteCallBack = this.deleteCallBack.bind(this)\n\tthis.state = {\n\t\titems: []\n\t}\n\t}\n\tcallBackFunction(data) {\n\tconsole.log(\"Added!\", data)\n\tlet newElement = {\n\t\tkey: (this.state.items.length).toString(),\n\t\titemName: data\n\t}\n\tthis.state.items.push(newElement)\n\tthis.setState({\n\t\titems: this.state.items\n\t})\n\t}\n\n\tdeleteCallBack(key){\n\tconsole.log(\"Deleted!\", key)\n\n\tthis.state.items.splice(key, 1)\n\tthis.setState({\n\t\titems: this.state.items\n\t})\n\t}\n\n\trender() {\n\treturn (\n\t\t<div>\n\t\t<ItemList list={this.state.items} callBack={this.deleteCallBack}/>\n\t\t<AddItem callBack={this.callBackFunction} />\n\t\t</div>\n\t)\n\t}\n}\nReactDOM.render(\n\t<MainPage />,\n\tdocument.getElementById('root')\n)",
                    "name": "main.jsx",
                    "lang": "jsx"
                }
            ],
            "hints": [],
            "validation": [
                {
                    "validate": true,
                    "type": "validate-dom",
                    "actions": [
                        {
                            "run": "webdev-7-0-0.jsx",
                            "editorIndex": 0
                        },
                        {
                            "execOnDOM": "document.querySelector('input').value = 'test #1'"
                        },
                        {
                            "execOnDOM": "document.querySelector('button').click()"
                        },
                        {
                            "checkDOM": "test #1X",
                            "command": "document.querySelector('#root > div > div:nth-child(1)').innerText",
                            "onerror": "The button Add button did not work, or there was no \"X\" delete button"
                        }
                    ]
                }
            ],
            "points": 0,
            "coins": 0
        }
    ]
}