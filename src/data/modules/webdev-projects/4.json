{
    "type": "project",
    "pages": [
        {
            "type": "information",
            "title": "Week 5 Project - NPM Module",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ Create a Node.js module/library with some helper functions to do certain repeated tasks \n➔ It can be very simple from just a simple add/subtract function\n➔ Or it could be something a bit more complicated like appending text to a file\n➔ Create a few of these helper functions and then import them in another file to actually use them\n➔ Play around with this, and see what you can create!"
                }
            ]
        },
        {
            "type": "information",
            "title": "Setup your workspace",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Important note: This project requires a [[link=https://replit.com]]replit[[/link]] account. [[/]]\n➔ To get started, we need to setup our repl. Once you have an account, login and create a repl with language “Node.JS”\n➔ Next, we need to setup and create our files. Create a package.json and an index.js\n➔ Let’s open package.json. Inside it, create a JSON with properties\n➔ “name”, “version”, “description”, “dependencies”, and “main”.\n➔ All of these values are strings, except for dependencies. If your \n➔ package doesn’t require dependencies, just set the value of this as an empty JSON.\n[[ ]][[ ]]◆ The “main” JSON key describes what JS file to run when your package gets called. Leave this as “index.js”"
                },
                {
                    "type": "image",
                    "src": "./data/modules/webdev-projects-assets/img4/0-0.png",
                    "width": "30%"
                },
                {
                    "type": "code",
                    "content": "{\n\t\"name\": \"@yourname/yourPackageName\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"What your package does\",\n\t\"main\": \"index.js\",\n\t\"dependencies\": {}\n}",
                    "name": "package.json",
                    "lang": "json"
                }
            ]
        },
        {
            "type": "information",
            "title": "index.js",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ This file will be the file that gets run every time the user calls your package.\n➔ You can make your function available through module.exports\n➔ We’re going to create a module that adds two numbers. If you would like to make things more complicated, feel free to! But first, try going through this process so you understand how NPM packages work\n➔ Create a function called main with parameters “num1” and “num2”\n➔ Now, check if both of these parameters are numbers with the Number.isFinite(var) function. If it isn’t, then throw an error.\n➔ Lastly, return num1+num2;\n➔ To make this function available in the NPM package, set module.exports=myFunction\n➔ See the full code example on the next slide"
                }
            ]
        },
        {
            "type": "information",
            "title": "index.js (Math functions)",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Defining all of our math functions[[/]]"
                },
                {
                    "type": "code",
                    "content": "const add = (a, b) => a + b;\nconst subtract = (a, b) => a - b;\nconst multiply = (a, b) => a * b;\nconst divide = (a, b) => a / b;"
                },
                {
                    "type": "text",
                    "content": "[[h3]]Exporting them[[/]]"
                },
                {
                    "type": "code",
                    "content": "module.exports = {\n\tadd,\n\tsubtract,\n\tmultiply,\n\tdivide\n};",
                    "lang": "javascript"
                }
            ]
        },
        {
            "type": "information",
            "title": "index.js (word counter)",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Another NPM module example that counts the words in a file and appends it inside of the file[[/]]"
                },
                {
                    "type": "code",
                    "content": "const fs = require(\"file-system\");\n\nconst wordCounter = function(pathToFile){\n\tconst text = fs.readFileSync(pathToFile, \"utf8\");\n\tvar wordCount = text.split(' ').length;\n\tvar writeText = text+\"\n\"+\"Word Count: \"+wordCount;\n\tfs.writeFileSync(pathToFile, writeText);\n\treturn wordCount;\n}\nmodule.exports = wordCounter;"
                }
            ]
        },
        {
            "type": "information",
            "title": "Package testing",
            "elements": [
                {
                    "type": "text",
                    "content": "This is great and all, but how do we test our package to make sure it works?\n➔ Next, create a “testing.js” file in the same directory as “index.js”\n➔ In this file, import the package by using const addpackage = require(\"./index\");\n➔ Now, you can call the “addpackage” function by using console.log(addpackage(5, 10))\n➔ If all goes well, you should see “15” logged in the console when you run \n➔ “node testing.js”\n➔ Then, you can test all of \n➔ the other functions too!"
                },
                {
                    "type": "code",
                    "content": "const addpackage = require('./index');\n\nconsole.log(addpackage.add(5,10))"
                },
                {
                    "type": "text",
                    "content": "Note: In Replit, to run these commands, make sure you select the \"shell\" tab, NOT the \"Console\" tab"
                }
            ]
        },
        {
            "type": "information",
            "title": "Getting ready to publish to NPM",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ This is the exciting part. Publishing to the web. To publish, you have to add a few more things.\n➔ README.md | You need to create this file in the root directory, and in here, you can input markdown code to let users know what your package does. \n➔ package.json | We need to add a few more parameters in here. \n[[ ]][[ ]]◆ You can add a “license” parameter with a license name of your choosing\n[[ ]][[ ]]◆ You can also add a “repository” parameter with a URL pointing to your package’s repository\n[[ ]][[ ]]◆ Lastly, you can add a “keywords” parameter with an array of multiple keywords related to your package\n➔ name | for the name of your package, we suggest using the format of “@user/packagename” - this is called a scoped package"
                },
                {
                    "type": "code",
                    "content": "{\n\t\"name\": \"@yourname/yourPackageName\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"What your package does\",\n\t\"main\": \"index.js\",\n\t\"dependencies\": {},\n\t\"repository\": \"your repository url\",\n\t\"license\": \"MIT\",\n\t\"keywords\": [\n\t\"add\",\n\t\"number\"\n\t]\n}",
                    "lang": "json"
                }
            ]
        },
        {
            "type": "information",
            "title": "Setup your workspace",
            "elements": [
                {
                    "type": "text",
                    "content": "[[h3]]Publishing to NPM[[/]]\n➔ To publish to NPM, you first need an account. Grab one here: [[a]]https://www.npmjs.com/signup[[/a]]\n➔ Now, go to your terminal and enter [[`]]npm login[[/]]\n➔ NPM will ask you for your username, password, and email. Enter those, and you should get a message like “Logged in as foobar to scope @yourUsername on https://registry.npmjs.org/.”\n➔ Try running [[`]]npm publish[[/]] right now. You might get an error, but that’s ok. NPM defaults to [[b]]publishing[[/]] as a private package, but this needs payments. Instead, run [[`]]npm publish --access=public[[/]]\n➔ Awesome! You just published your first package. You will receive an email about this, and after a few minutes, you’ll be able to see your package on NPM!\n➔ But what if you need to issue an update? Time to publish again right! Well if you try, you’ll get an error [[`]][[red]]npm ERR! - You cannot publish over the previously published versions: 1.0.0. Instead, update the version with npm version patch and try publishing again![[/]][[/]]\n[[ ]][[ ]]◆ There are also the commands npm version major, npm version minor, and npm version patch. These will update the versioning number. (major.minor.patch is the versioning system)"
                }
            ]
        },
        {
            "type": "information",
            "title": "NPM commands",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ Great! Now what if we need to install a NPM package? We can either use \n➔ npm install `packageName` or we can use the command npm install, which reads your package.json and installs all of the dependencies listed inside of it.\n➔ NPM is a really versatile application. You can also create “shortcuts” to commands with a package.json. If you want to run a JS file, but forget what it’s called, you can list a command under “scripts” inside of your package.json, and then run it with npm run {scriptName}"
                },
                {
                    "type": "code",
                    "content": "{\n\t\"name\": \"My App\",\n\t\"version\": \"1.0.0\",\n\t\"description\": \"What your package does\",\n\t\"main\": \"index.js\",\n\t\"scripts\": {\n\t\"startServer\": \"node index.js\"\n\t}\n\t\"author\": \"Your Name\",\n\t\"dependencies\": {\n\t\"axios\": \"^0.21.1\"\n\t},\n\t\"repository\": \"your repository url\",\n\t\"license\": \"MIT\",\n\t\"keywords\": [\n\t\"add\",\n\t\"number\"\n\t]\n}",
                    "lang": "json"
                }
            ]
        }
    ]
}