{
    "type": "lesson",
    "pages": [
        {
            "type": "information",
            "title": "Introduction",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ The following pages will include many examples. Feel free to follow along and run these yourself."
                },
                {
                    "type": "text",
                    "content": "➔ Use the built-in python IDE to run these [[link=#/my-projects]]here[[/link]]."
                },
                {
                    "type": "text",
                    "content": "➔ Or, create a Replit account and follow along there!"
                }
            ]
        },
        {
            "type": "information",
            "title": "Loop Syntax",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ All loops must follow this syntax"
                },
                {
                    "type": "text",
                    "content": "➔ To start a loop, must use “:” character"
                },
                {
                    "type": "text",
                    "content": "➔ All code must be indented under the loop"
                },
                {
                    "type": "text",
                    "content": "➔ There is no character to end a loop"
                },
                {
                    "type": "text",
                    "content": "➔ Don’t indent code anymore when you want to end the loop"
                },
                {
                    "type": "code",
                    "content": "loop:\n  all code inside indented will be looped\nx = 5\n# This code is not part of the loop",
                    "lang": "python"
                }
            ]
        },
        {
            "type": "information",
            "title": "Conditional Loops",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ In Python, there are three basic kinds of conditionals"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ If: Executes some code if a given condition is true"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ Else: Must be paired with if; Executes some code if the condition within the paired if block was false"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ Elif: Must be paired with if; Executes some code if the condition within the paired if block was false AND a second given condition was met"
                },
                {
                    "type": "code",
                    "content": "seq = [\"a\", 2, 9, None]\n\nif \"a\" in seq:\n  print(\"entered the if\")\nif 2 in seq:\n  print(\"entered the second if\")\nelse:\n  print(\"entered the else\")\n\nif \"a\" in seq1:\n  print(\"entered the if\")\nelif 2 in seq1:\n  print(\"entered the elif\")\nelse:\n  print(\"entered the else\")",
                    "lang": "python"
                }
            ]
        },
        {
            "type": "information",
            "title": "While Loops",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ Repeatedly executes code inside the while loop as long as the condition is true"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ while is the keyword"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ i < 10 is the boolean condition"
                },
                {
                    "type": "divider"
                },
                {
                    "type": "text",
                    "content": "➔ Program prints all numbers from 0-9"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ As soon as i = 10, the condition is false so the loop terminates"
                },
                {
                    "type": "code",
                    "content": "i = 0\nwhile i < 10:\n  print(i)\n  i += 1",
                    "lang": "python"
                }
            ]
        },
        {
            "type": "information",
            "title": "For Loops",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ Repeatedly executes the code inside the for loop for a given range"
                },
                {
                    "type": "text",
                    "content": "➔ Create for loops"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ for [variable] in range([number]):"
                },
                {
                    "type": "text",
                    "content": "➔ range(a) goes from 0 to a-1"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ range(10) would go 0, 1, 2…, 8, 9"
                },
                {
                    "type": "text",
                    "content": "➔ Second definition"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ for [variable] in range([start], [end]):"
                },
                {
                    "type": "text",
                    "content": "➔ range(a, b) goes from a to b-1"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ range(5, 10) would go from 5, 6,...,8, 9"
                },
                {
                    "type": "code",
                    "content": "for x in range(10):\n  print(x)\n\nfor x in range(0, 10):\n  print(x)",
                    "lang": "python"
                }
            ]
        },
        {
            "type": "information",
            "title": "For Loops Continued",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ Third range definition"
                },
                {
                    "type": "text",
                    "content": "➔ For [variable] in range(a, b, c):"
                },
                {
                    "type": "divider"
                },
                {
                    "type": "text",
                    "content": "➔ range(a, b, c) goes from a to b-1 in increments of c"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ range(1, 11, 2) - 1, 3, 5,...9"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]][[ ]][[ ]]● It stops at 9, not 11 because 11 is out of bounds"
                },
                {
                    "type": "code",
                    "content": "for x in range(1, 11, 2):\n    print(x)",
                    "lang": "python"
                }
            ]
        },
        {
            "type": "information",
            "title": "Introduction to Functions",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ Functions are code that runs only when it is called"
                },
                {
                    "type": "text",
                    "content": "➔ How to create functions"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ def [function name]():"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ def is a keyword"
                },
                {
                    "type": "text",
                    "content": "➔ A function will only execute if it is called"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ Call a function by simply typing its name"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ In the second example, HelloWorld! Is printed when there is printHello() in the code"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ In the first example, nothing happens since printHello() isn’t called"
                },
                {
                    "type": "code",
                    "content": "def printHello():\n  print(\"HelloWorld!\")\n\nprintHello()",
                    "lang": "python"
                }
            ]
        },
        {
            "type": "information",
            "title": "Functions with Parameters",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ Parameters are variables you can pass into the function"
                },
                {
                    "type": "text",
                    "content": "➔ When calling the function, you put the actual value of the variable"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ The first function call would print “Hello my name is Bob”"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ The second function call would print “Hello my name is Joe”"
                },
                {
                    "type": "text",
                    "content": "➔ Functions can also have multiple parameters"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ “Hello my name is Bob Smith”"
                },
                {
                    "type": "code",
                    "content": "def printName(name):\n  print(\"Hello name is \"+name)\n\nprintName(\"Bob\")\nprintName(\"Joe\")\n\ndef printName(firstName, lastName):\n  print(\"Hello my name is \"+firstName+\" \"+lastName)\n\nprintName(\"Bob\", \"Smith\")",
                    "lang": "python"
                }
            ]
        },
        {
            "type": "information",
            "title": "Functions with return values",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ A function can return values"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ In the previous examples, the functions did not have actual values"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ return keyword gives the function an actual value"
                },
                {
                    "type": "text",
                    "content": "➔ doubleNum(5) has a value of 10"
                },
                {
                    "type": "text",
                    "content": "➔ mult(x, y)"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ Another example of functions with return values"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ x has a value of 35"
                },
                {
                    "type": "code",
                    "content": "def doubleNum(x):\n  return x * 2\n\ndoubled = doubleNum(5)\n\ndef mult(x, y):\n  return x * y\n\nx = mult(5, 7)",
                    "lang": "python"
                }
            ]
        },
        {
            "type": "information",
            "title": "Introduction to Libraries",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ What is a library?"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ A library in python contains useful external python functionalities that are included in python unless you add the library to your code"
                },
                {
                    "type": "text",
                    "content": "➔ How do you add a library?"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ import keyword adds a library to your code"
                },
                {
                    "type": "text",
                    "content": "➔ Library Examples"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ Random, time (relatively standard libraries)"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ Tensorflow, PyTorch (AI libraries)"
                },
                {
                    "type": "code",
                    "content": "import random\nimport time",
                    "lang": "python"
                }
            ]
        },
        {
            "type": "information",
            "title": "Library: Random",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ The random library allows you to generate random numbers"
                },
                {
                    "type": "text",
                    "content": "➔ How to use?"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ random.randint(start, end) returns a value between start and end (inclusive)"
                },
                {
                    "type": "text",
                    "content": "➔ random.randint(1, 10) will return a random value between 1 and 10"
                },
                {
                    "type": "code",
                    "content": "import random\n\nprint(random.randint(1, 10))",
                    "lang": "python"
                }
            ]
        },
        {
            "type": "information",
            "title": "Library: Time",
            "elements": [
                {
                    "type": "text",
                    "content": "➔ The time library is related to time in real life"
                },
                {
                    "type": "text",
                    "content": "➔ Epoch - the point where time begins for computer systems"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ January 1, 1970, 00:00:00 for Unix"
                },
                {
                    "type": "text",
                    "content": "➔ time.time()"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ Number of seconds since epoch"
                },
                {
                    "type": "text",
                    "content": "➔ time.ctime([seconds since epoch])"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ Outputs a readable time string some number of seconds after epoch that represents the time since epoch"
                },
                {
                    "type": "text",
                    "content": "➔ Output looks like this"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ Thu Dec 27 15:49:29 2018"
                },
                {
                    "type": "text",
                    "content": "[[ ]][[ ]]◆ Sun Sep 12 21:01:30 2021"
                },
                {
                    "type": "code",
                    "content": "import time\n\nsec = time.time()\n\nprint(time.ctime(sec))\n\nprint(time.ctime(1545925769.9618232))",
                    "lang": "python"
                }
            ]
        }
    ]
}