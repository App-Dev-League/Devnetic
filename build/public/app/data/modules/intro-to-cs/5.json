{"type":"lesson","pages":[{"type":"information","title":"What is USACO?","elements":[{"type":"text","content":"➔ United States of America Computing Olympiad: [[link=http://usaco.org/]]USACO official website[[/link]]\n➔ Create an account → participate in the contests (submit code file)\n➔ 4 Divisions: Bronze, Silver, Gold, Platinum\n➔ Each competition contains 3-4 logic-based/algorithmic problems in 3 hours\n"},{"type":"split-content","elements":[{"type":"text","content":"➔ Can use variety of languages \n[[ ]][[ ]]◆ Python, C++, Java, etc.\n➔ We will be using Python\n"},{"type":"image","src":"./data/modules/intro-to-cs-assets/img5/0-0.png","lang":"python"}]},{"type":"text","content":"➔ There are multiple competitions per year\n➔ Every problem has 10+ test cases when you submit\n➔ The website will automatically run your program on the test case to see if it produces the correct output based on the input\n➔ You get points for getting correct test cases\n➔ Getting a certain amount of points in one competition will promote you to the next division\n"}]},{"type":"information","title":"Downsides of Python in USACO","elements":[{"type":"text","content":"➔ Biggest fault with Python is that it has a slow runtime\n➔ Although algorithm should work for every case, it may fail on certain test cases on advanced problems because it takes too long for the program to run a given case\n➔ However, Python is good enough for Bronze\n"},{"type":"divider"},{"type":"text","content":"[[h3]]I/O in USACO[[/]]"},{"type":"text","content":"➔ USACO now supports using [[`]]input()[[/]] and [[`]]print()[[/]] for input/output\n➔ Though, a more time efficient way is [[`]]stdin[[/]] and [[`]]stdout[[/]]\n"},{"type":"split-content","elements":[{"type":"code","lang":"python","content":"# import the sys module to use std in/out\nimport sys\n\n# sys.stdin/stdout is similar to a file, in that we read lines for input/output\n\nmy_str = sys.stdin.readline()\nsys.stdout.write(str(myStr) + '\\n')\n\n# reads the whole input file\nsys.stdin.read()"},{"type":"code","lang":"python","content":"import sys\n\n# use map to convert input to integers\nnums = list(map(int, sys.stdin.readline().split()))"}]}]},{"type":"information","title":"Time Complexity","elements":[{"type":"text","content":"➔ Program needs to finish running within O(5 * 10^8)\n➔ Big O Notation → expresses worst-case time complexity\n[[ ]][[ ]]◆ O(1) = constant time\n[[ ]][[ ]]◆ O(n) = linear time\n[[ ]][[ ]]◆ O(log n) = logarithmic time\n[[ ]][[ ]]◆ O(n^2) = quadratic time\n[[ ]][[ ]]◆ O(n!) = factorial time\n"},{"type":"split-content","elements":[{"type":"code","lang":"python","content":"# 0(1)\nx = 3\nif x == 3:\n  print(\"hi\")\nprint(\"bye\")"},{"type":"code","lang":"python","content":"# 0(n^2)\nfor i in range(N):\n  for j in range(i, N):\n      print(i, j)\n"},{"type":"code","lang":"python","content":"# 0(log n)\nl = ... # some sorted list\n\n# binary search\nmax = N-1\ntarget = 5\nmin = 0\nwhile max >= min:\n  mid = (max + min)//2\n  if l[mid] == target:\n      print(mid)\n      break\n  elif 1[mid] < target:\n    min = mid + 1\n  else:\n    max = mid - 1"},{"type":"code","lang":"python","content":"# 0(n)\nfor i in range(N):\n  print(i)\n\n# constant factors are not accounted for\n# still 0(n)\nfor i in range(N + 10000):\n  print(i + 300)"}]},{"type":"divider"},{"type":"text","content":"[[h3]]Time Complexity of Algorithms[[/]]"},{"type":"split-content","elements":[{"type":"text","content":"➔ Mathematical formulas = O(1)\n➔ Binary search = O(log n)\n➔ Factors of an integer = O(√n)\n➔ Reading input/iterating through array = O(n)\n➔ Sorting = O(n log n)\n➔ All subsets of size k = O(n^k)\n➔ All subsets = O(2^n)\n➔ All possible permutations = O(n!)\n"},{"type":"image","src":"./data/modules/intro-to-cs-assets/img5/1-0.png"}]}]},{"type":"information","title":"Additional Information","elements":[{"type":"text","content":"[[h3]]Additional Info - Lists[[/]]"},{"type":"split-content","elements":[{"type":"text","content":"➔ Useful methods for USACO\n[[ ]][[ ]]◆ To add value to end of the list:  [[`]]seq.append(3)[[/]]\n[[ ]][[ ]]◆ To remove kth element from list: [[`]]seq.pop(k-1)[[/]]\n[[ ]][[ ]]◆ To get first k elements of a list: [[`]]seq[:k][[/]]\n[[ ]][[ ]]◆ To get last k elements of a list: [[`]]seq[len(seq)-k:][[/]]\n[[ ]][[ ]]◆ To get reverse of a list: [[`]]seq[::-1][[/]]\n"},{"type":"code","lang":"python","content":"seq = [] # initializing the list\n\nfor i in range(1, 6):\n  seq.append(i)\nprint(seq) # [1, 2, 3, 4, 5]\n\nprint(seq.pop(1)) # 2; seq = [1, 3, 4, 5]\n\n# without paramter --> removes last element\nprint(seq.pop()) # 5; seq = [1, 3, 4]\n\n# setting list to last two elements\nseq = seq[1:] # [3, 4]\n\n# setting list to reverse of it\nseq = seq[::-1] # [4, 3]"}]},{"type":"divider"},{"type":"text","content":"[[h3]]Additional Info - Strings[[/]]"},{"type":"split-content","elements":[{"type":"text","content":"➔ Super helpful method: [[`]]input().split()[[/]]\n[[ ]][[ ]]◆ Puts input into a list\n[[ ]][[ ]]◆ Each element of the list determined by if it was separated by space from next element in the string\n"},{"type":"code","lang":"python","content":"string = \"a b c\"\nsArr = string.split() # [\"a\", \"b\", \"c\"]\n\n# input format\n# 2\n# 1 2 3\n# 4 5 6\n\nN = int(input()) # 2\narr = [] # initializing list\nfor i in range(N): # 0 1\n    z = input().split() # [\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"]\n    for j in range(len(z)): # 0 1 2\n        z[j] = int(z[j]) # \"1\" \" --> 1, \"2\" --> 2, etc...\n    arr.append(z) # [ [1, 2, 3], [4, 5, 6] ]        "}]}]},{"type":"information","title":"Simulation","elements":[{"type":"text","content":"➔ When given a description of process of how result is produced in the problem statement → simulate it!\n➔ Simulation = a program that uses step by step methods to achieve the end result\n➔ Extremely intuitive\n"},{"type":"divider"},{"type":"text","content":"[[h3]]Example Problem[[/]]"},{"type":"text","content":"➔ Three possible starting pos (1, 2, 3)\n[[ ]][[ ]]◆ Start pos = 1 → second pos = 2 (+0) → third pos = 3 (+0) → final pos = 1 (+1)\n[[ ]][[ ]]◆ Start pos = 2 → second pos = 1 (+1) → third pos = 1 (+1) → final pos = 3 (+0)\n[[ ]][[ ]]◆ Start pos = 3 → second pos = 3 (+0) → third pos = 2 (+0) → final pos = 2 (+0)\n"},{"type":"iframe","src":"./data/modules/intro-to-cs-assets/img5/2-0.html"},{"type":"divider"},{"type":"text","content":"[[h3]]Solution[[/]]"},{"type":"code","content":"N = int(input()) # number of swaps\na = []\nb = []\ng = []\nfor i in range(N):\n  z = input().split()\n  a.append(int(z[0]))\n  b.append(int(z[1]))\n  g.append(int(z[2]))\nmaxS = 0\nfor i in range(1, 4):\n    curr = i\n    scores = 0\n    for j in range(N): # simulating the problem\n        if a[j] == curr:\n          curr = a[j]\n        elif b[j] == curr:\n          curr = b[j]\n        if curr == g[j]:\n            scores += 1\n    maxS = max(maxS, scores) # getting the best answer\nprint(maxS)","lang":"python"}]},{"type":"information","title":"Complete Search","elements":[{"type":"text","content":"➔ Also called brute force\n➔ Usually using loops/recursion to check all possible cases\n➔ Searches complete solution space\n➔ Extremely intuitive but time complexity is often an issue\n"},{"type":"divider"},{"type":"text","content":"[[h3]]Complete Search Problem[[/]]"},{"type":"split-content","elements":[{"type":"iframe","src":"./data/modules/intro-to-cs-assets/img5/3-0.html"},{"type":"text","content":"➔ Set the baseline of time intervals covered before firing\n➔ For every lifeguard fired, count how many time intervals still covered\n➔ Reemploy the lifeguard and repeat\n"}]},{"type":"divider"},{"type":"text","content":"[[h3]]Solution[[/]]"},{"type":"code","lang":"python","content":"N = int(input()) # how many lifeguards\nstart = [] # keep track of starting times\nend = [] # keep track of ending times\nfor i in range(N):\n    z = input().split()\n    start.append(int(z[0]))\n    end.append(int(z[1]))\n\ncovered = [0 for i in range(1001)] # keep track of how\n# many lifeguards cover each time interval\nfor i in range(N):\n    for j in range(start[i], end[i]):\n        covered[j] += 1\n\nmaxCovered = 0\nfor i in range(N):\n    # fire (i+1)th lifeguard\n    for j in range(start[i], end[i]):\n\n        covered[j] -=1\n    # count how many intervals are covered\n    count = 0\n\n    for j in range(1001):\n        if maxCovered[j] > 0:\n            count += 1\n\n    maxCovered = max(maxCovered, count)\n\n    # reemploy (i+1l)th lifeguard\n\n    for j in range(start[i], end[1]):\n        covered[j] += 1\n\nprint(maxCovered)"}]},{"type":"information","title":"Sorting","elements":[{"type":"text","content":"➔ Arranging items in a particular order\n➔ Built-in sort = enough for Bronze\n➔ O(n log n)\n➔ Sort by increasing order: [[`]]seq.sort()[[/]]\n➔ Sort by decreasing order: [[`]]seq.sort(reverse=True)[[/]]\n"},{"type":"divider"},{"type":"text","content":"[[h3]]Structure Sorting[[/]]"},{"type":"code","lang":"python","content":"def comp(c):\n  return c[1] # sorting by the second item\n\nN = int(input())\ncityArr = N*[0] # initializing the array\nfor i in range(N):\n  name = input()\n  population = int(input())\n  cityArr[i] = name, population\nprint(cityArr) # [ [\"LA\", 800000], [\"Berlin\", 100000], [\"Paris\", 500000] ]\ncityArr.sort(key=comp) # structure sorting\n\nprint(cityArr) # [ [\"Berlin\", 100000], [\"Paris\", 500000], [\"LA\", 800000] ]"},{"type":"divider"},{"type":"text","content":"[[h3]]Sorting Problem[[/]]"},{"type":"text","content":"➔ Should sort by time of arrival"},{"type":"iframe","src":"./data/modules/intro-to-cs-assets/img5/4-0.html"},{"type":"divider"},{"type":"text","content":"[[h3]]Solution[[/]]"},{"type":"code","lang":"python","content":"def c(m):\n    return m[0]\n\nN = int(input())\narr = []\nfor i in range(N):\n    z = input().split()\n    z[0] = int(z[0])\n    z[1] = int(z[1])\n    arr.append(z)\narr.sort(key=c) # structure sort by increasing arrival time\nctime = arr[0][0] + arr[0][1]\ncounter = ctime\nfor i in range(1, N):\n    if ctime < arr[i][0]: # if the amount that the cow's\n      # questioning time + current time is less than\n      # arrival time of the next cow, add questioning time\n      # and waiting time between end of current cow's\n      # interrogation and when next cow will arrive\n        counter += arr[i][0] - ctime + arr[i][1]\n    else:# in all other cases, only add questioning time of\n      # next cow\n        counter += arr[i][1]\n    # recalibrate current time\n    ctime = counter\nprint(counter)"}]},{"type":"information","title":"Greedy Algorithms","elements":[{"type":"text","content":"➔ Selecting the choice that seems the best at the moment at every step of the program\n➔ Choosing the locally optimal choice\n"},{"type":"divider"},{"type":"text","content":"[[h3]]Greedy Problem[[/]]"},{"type":"iframe","src":"./data/modules/intro-to-cs-assets/img5/5-0.html"},{"type":"divider"},{"type":"text","content":"[[h3]]Solution[[/]]"},{"type":"code","lang":"python","content":"N_B = input().split()\nN = int(N_B[0])\nB = int(N_B[1])\n\nprice = []\ntotal = []\nmaxgifts = -1\n\nfor i in range(N):\n    z = input().split()\n    z[0] = int(z[0])\n    z[1] = int(z[1])\n    price.append(z)\nfor i in range(N):\n    total.clear()\n    total.append(price[i][0] // 2 + price[i][1])\n    for j in range(N):\n        if i != j:\n            total.append(price[j][0] + price[j][1])\n    total.sort()\n    c = 0\n    counter = 0\n    for k in range(len(total) - 1):\n        if c + total[k] > B:\n            break\n        c += total[k]\n        counter += 1\n    maxgifts = max(maxgifts, counter)\nprint(maxgifts)"}]}]}