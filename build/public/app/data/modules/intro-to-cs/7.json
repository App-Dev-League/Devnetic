{"type":"lesson","pages":[{"type":"information","title":"Intro to USACO Gold","elements":[{"type":"split-content","elements":[{"type":"text","content":"➔ Third division of USACO\n➔ Harder than bronze and silver, but easier than platinum\n➔ Concepts include: Number Theory, Dynamic Programming, Trees, and Hashing\n"},{"type":"image","src":"./data/modules/intro-to-cs-assets/img7/0-0.png"}]}]},{"type":"information","title":"Modular Arithmetic","elements":[{"type":"text","content":"[[h3]]The modulo[[/]]\n➔ Modular arithmetic is based on taking remainders of divisions, and modulo is the mathematical name of a function that returns the remainder of a certain division, abbreviated as mod\n➔ For example, [[`]]2 mod 3[[/]] is 2 because 3 goes into 2 zero times, and the entirety of the 2 is left as a remainder\n➔ We use this to avoid working with numbers that would cause the memory limit of integers and other data types to overflow, so instead of working with some entire number x, we work with x mod m where m can be any number we choose.\n"},{"type":"divider"},{"type":"text","content":"[[h3]]Problems Involving Modulo[[/]]\n➔ Problem from: [[a]]https://cses.fi/problemset/task/1095[[/a]]\n➔ Problem statement: \n[[ ]][[ ]]◆ “The first input line contains an integer n: the number of calculations. After this, there are n lines, each containing two integers a and b. Print each value ab modulo 109 + 7“\n➔ The main issue with this is that directly calculating exponents and then using modulo will almost certainly cause the data type to overflow\n➔ Hence, we must use some clever manipulation to solve this problem within the memory limit\n"},{"type":"divider"},{"type":"text","content":"[[h3]]Solution[[/]]"},{"type":"split-content","elements":[{"type":"text","content":"➔ Interestingly, we do not have to hardcode any trickery ourselves because Python comes with this built in\n➔ We simply pass in another input to the Python pow function and it handles the processing automatically\n➔ In the next slide, we will go into what Python is actually doing behind the scenes to make this work\n"},{"type":"code","lang":"python","content":"MOD = 10 ** 9 + 7\nn = int(input())\n\nfor i in range(n):\n  inp = input().split()\n  base = int(inp[0])\n  exponent = int(inp[1])\n  print(pow(base, exponent, MOD))"}]},{"type":"divider"},{"type":"text","content":"[[h3]]Delving Deeper[[/]]\n➔ To achieve quick speeds and perform modulo automatically, Python uses binary exponentiation along with a modulo. Our implementation of this is shown below.\n"},{"type":"code","content":"def binpow(base, exp, mod):\n  base %= m\n  res = 1\n  while (exp > 0):\n    if (exp % 2 == 1): # check if the exponent is odd\n      res = res * base % m\n    base = base * base % m\n    exp //= 2\n  return res","lang":"python"},{"type":"text","content":"➔ In binary exponentiation, we calculate the exponents of numbers by recursively dividing the exponent by 2.\n➔ Let’s go through an example: \n[[ ]][[ ]]◆ 3⁶ could be calculate using 6 multiplications of 3, i.e. 3 * 3 * 3 * 3 * 3 * 3\n[[ ]][[ ]]◆ However, if we knew that 3³ = 27, we would only need one multiplication, 27 * 27\n[[ ]][[ ]]◆ So, we can start with our exponent and keep dividing by 2 until we get to 3 and then build up again\n"},{"type":"divider"},{"type":"text","content":"➔ To adjust for odd powers, we need an if statement to check if an exponent is odd and multiply it by the base once more\n[[ ]][[ ]]◆ For example, for 3⁵, we use (3²)² * 3\n➔ Here’s how one call to our function actually looks like:\n[[ ]][[ ]]◆ binpow(3, 6) -> binpow(3, 3)² -> (binpow(3,1)2 * 3)²\n[[ ]][[ ]]◆ Which gives us (3² * 3)² = 27² = 729\n➔ Now, we simply add modulo(%) m for every step of the process, and we are done!\n"}]},{"type":"information","title":"Modular Arithmetic Resources","elements":[{"type":"text","content":"➔ Here’s a few links you can check out to learn more\n➔ [[a]]https://usaco.guide/gold/modular?lang=java[[/a]]\n➔ [[a]]https://en.wikipedia.org/wiki/Modular_arithmetic[[/a]]\n➔ [[a]]https://en.wikipedia.org/wiki/Modular_exponentiation[[/a]]\n➔ [[a]]https://www.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation[[/a]]\n➔ [[a]]https://www.geeksforgeeks.org/modular-exponentiation-power-in-modular-arithmetic/[[/a]]\n"}]},{"type":"information","title":"Memoization","elements":[{"type":"text","content":"[[h3]]Fibonacci[[/]]\n➔ The fibonacci sequence involves starting with 2 ones and adding two previous terms to make the current term\n[[ ]][[ ]]◆ Here’s a few terms of the sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377...\n➔ In programming, we typically use recursion or iteration to calculate the terms of a fibonacci sequence, but we will run out of time when calculating later terms of the sequence if we just use recursion\n➔ Hence, we must employ a technique called memoization to speed up this process\n"},{"type":"divider"},{"type":"divider"},{"type":"split-content","elements":[{"type":"vertical-content","elements":[{"type":"text","content":"[[h3]]The naive approach[[/]]"},{"type":"text","content":"➔ Before we jump into memoization, let us consider why recursion is too slow\n➔ Consider the following code to calculate the nth fibonacci number\n"},{"type":"code","lang":"python","content":"def fib(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fib(n - 1) + fib(n - 2)"},{"type":"text","content":"➔ If we loop through values of n up to 200 and print the result for every n, the code will slow down significantly after about n = 20\n➔ So why is that? The code slows down because we are doing repetitive work\n➔ Consider the following calculations\n[[ ]][[ ]]◆ [[`]]fib(1) = 1[[/]]\n[[ ]][[ ]]◆ [[`]]fib(2) = 1[[/]]\n[[ ]][[ ]]◆ [[`]]fib(3) = fib(1) + fib(2) = 2[[/]]\n[[ ]][[ ]]◆ [[`]]fib(4) = fib(2) + fib(3) = fib(2) + fib(1) + fib(2) = 3[[/]]\n➔ Notice that for fib(4), we are repeating the calculation for fib(3), and as our numbers increase, we will continue to repeat more and more calculations\n➔ What if we had a way of storing this value so we wouldn’t have to repeat the calculation? This is where memoization comes in\n"}]},{"type":"vertical-content","elements":[{"type":"text","content":"[[h3]]Memoization[[/]]"},{"type":"text","content":"➔ Memoization is the process of storing values of previous calculations so that we can use them in future calculation\n➔ This is useful when previous calculations affect future ones and when we have to print answers for a range of values on the same function\n➔ To implement this in code, we will create a Python dictionary of previous results called the memo and store our results in it, as well as query it as needed\n"},{"type":"code","lang":"python","content":"def fib(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fib(n - 1) + fib(n - 2)"}]}]}]},{"type":"information","title":"Memoization Resources","elements":[{"type":"text","content":"➔ [[a]]https://en.wikipedia.org/wiki/Memoization[[/a]]\n➔ [[a]]https://www.cloudsavvyit.com/12446/what-is-memoization-and-why-does-it-matter/[[/a]]\n➔ [[a]]https://towardsdatascience.com/mastering-memoization-in-python-dcdd8b435189[[/a]]\n➔ [[a]]https://www.geeksforgeeks.org/memoization-using-decorators-in-python/[[/a]]\n➔ [[a]]https://www.geeksforgeeks.org/memoization-1d-2d-and-3d/[[/a]]\n"}]},{"type":"information","title":"Hashing","elements":[{"type":"text","content":"[[h3]]About Hashing[[/]]\n➔ Hashing is a process used to compare strings in an efficient manner, and also encrypt things like passwords and other secret data\n➔ Hashing is a (typically one-way) function that converts a string to an integer so that it can be compared efficiently\n➔ In the normal brute force method of comparison, we compare strings character by character so the amount of time it takes depends on the length of the string. Comparing hashes on the other hand takes constant time, independent of string length.\n"},{"type":"divider"},{"type":"text","content":"[[h3]]Polynomial Rolling Hash Function[[/]]\n➔ A widely used way to get the hash of a string is to use the polynomial rolling hash function\n➔ The math for this function is shown below, and you can learn more in the resources\n"},{"type":"image","src":"./data/modules/intro-to-cs-assets/img7/1-0.png"},{"type":"text","content":"➔ Essentially, this uses every letter of the string to create an integer representation unique to each string \n"},{"type":"divider"},{"type":"text","content":"[[h3]]Hashing in Python[[/]]\n➔ Hashing in Python is as easy as writing one line of code\n➔ You simply use Python’s built-in hash function and put in the string as the input\n➔ Therefore, if you wish to check equality efficiently, using the built-in hash function can be very efficient\n"},{"type":"code","lang":"python","content":"hash(string)"},{"type":"divider"},{"type":"text","content":"[[h3]]Extra Hashing Resources[[/]]\n➔ [[a]]https://searchsqlserver.techtarget.com/definition/hashing[[/a]]\n➔ [[a]]https://www.programiz.com/python-programming/methods/built-in/hash[[/a]]\n➔ [[a]]https://cp-algorithms.com/string/string-hashing.html[[/a]]\n➔ [[a]]https://en.wikipedia.org/wiki/Hash_function[[/a]]\n➔ [[a]]https://usaco.guide/gold/string-hashing?lang=py[[/a]]\n"}]},{"type":"information","title":"Graphs","elements":[{"type":"text","content":"[[h3]]Trees[[/]]\n➔ Trees are data structures that store data in a hierarchical manner\n➔ They are used for storing data like family hierarchies, organizational structures and more\n➔ Trees start with nodes that connect to each other via edges that define hierarchy\n"},{"type":"split-content","elements":[{"type":"image","src":"./data/modules/intro-to-cs-assets/img7/2-0.png"},{"type":"image","src":"./data/modules/intro-to-cs-assets/img7/2-1.png"}]},{"type":"divider"},{"type":"text","content":"[[h3]]Extra Resources[[/]]\n➔ [[a]]https://en.wikipedia.org/wiki/Tree_(data_structure)[[/a]]\n➔ [[a]]https://www.delftstack.com/howto/python/trees-in-python/ [[/a]]\n➔ [[a]]https://usaco.guide/gold/tree-euler?lang=py[[/a]]\n➔ [[a]]https://www.freecodecamp.org/news/all-you-need-to-know-about-tree-data-structures-bceacb85490c/[[/a]]\n➔ [[a]]https://stackoverflow.com/questions/2358045/how-can-i-implement-a-tree-in-python[[/a]]\n"}]}]}