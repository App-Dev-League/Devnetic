{"type":"lesson","pages":[{"type":"information","title":"Introduction","elements":[{"type":"text","content":"➔ The following pages will include many examples. Feel free to follow along and run these yourself.\n➔ Use the built-in python IDE to run these [[link=#/my-projects]]here[[/link]].\n➔ Or, create a Replit account and follow along there!"}]},{"type":"information","title":"Loop Syntax","elements":[{"type":"text","content":"➔ All loops must follow this syntax\n➔ To start a loop, must use “:” character\n➔ All code must be indented under the loop\n➔ There is no character to end a loop\n➔ Don’t indent code anymore when you want to end the loop"},{"type":"code","content":"loop:\n\tall code inside indented will be looped\nx = 5\n# This code is not part of the loop","lang":"python"}]},{"type":"information","title":"Conditional Loops","elements":[{"type":"text","content":"➔ In Python, there are three basic kinds of conditionals\n[[ ]][[ ]]◆ If: Executes some code if a given condition is true\n[[ ]][[ ]]◆ Else: Must be paired with if; Executes some code if the condition within the paired if block was false\n[[ ]][[ ]]◆ Elif: Must be paired with if; Executes some code if the condition within the paired if block was false AND a second given condition was met"},{"type":"code","content":"seq = [\"a\", 2, 9, None]\n\nif \"a\" in seq:\n\tprint(\"entered the if\")\nif 2 in seq:\n\tprint(\"entered the second if\")\nelse:\n\tprint(\"entered the else\")\n\nif \"a\" in seq1:\n\tprint(\"entered the if\")\nelif 2 in seq1:\n\tprint(\"entered the elif\")\nelse:\n\tprint(\"entered the else\")","lang":"python"}]},{"type":"information","title":"While Loops","elements":[{"type":"text","content":"➔ Repeatedly executes code inside the while loop as long as the condition is true\n[[ ]][[ ]]◆ while is the keyword\n[[ ]][[ ]]◆ i < 10 is the boolean condition"},{"type":"divider"},{"type":"text","content":"➔ Program prints all numbers from 0-9\n[[ ]][[ ]]◆ As soon as i = 10, the condition is false so the loop terminates"},{"type":"code","content":"i = 0\nwhile i < 10:\n\tprint(i)\n\ti += 1","lang":"python"}]},{"type":"information","title":"For Loops","elements":[{"type":"text","content":"➔ Repeatedly executes the code inside the for loop for a given range\n➔ Create for loops\n[[ ]][[ ]]◆ for [variable] in range([number]):\n➔ range(a) goes from 0 to a-1\n[[ ]][[ ]]◆ range(10) would go 0, 1, 2…, 8, 9\n➔ Second definition\n[[ ]][[ ]]◆ for [variable] in range([start], [end]):\n➔ range(a, b) goes from a to b-1\n[[ ]][[ ]]◆ range(5, 10) would go from 5, 6,...,8, 9"},{"type":"code","content":"for x in range(10):\n\tprint(x)\n\nfor x in range(0, 10):\n\tprint(x)","lang":"python"}]},{"type":"information","title":"For Loops Continued","elements":[{"type":"text","content":"➔ Third range definition\n➔ For [variable] in range(a, b, c):"},{"type":"divider"},{"type":"text","content":"➔ range(a, b, c) goes from a to b-1 in increments of c\n[[ ]][[ ]]◆ range(1, 11, 2) - 1, 3, 5,...9\n[[ ]][[ ]][[ ]][[ ]]● It stops at 9, not 11 because 11 is out of bounds"},{"type":"code","content":"for x in range(1, 11, 2):\n\tprint(x)","lang":"python"}]},{"type":"information","title":"Introduction to Functions","elements":[{"type":"text","content":"➔ Functions are code that runs only when it is called\n➔ How to create functions\n[[ ]][[ ]]◆ def [function name]():\n[[ ]][[ ]]◆ def is a keyword\n➔ A function will only execute if it is called\n[[ ]][[ ]]◆ Call a function by simply typing its name\n[[ ]][[ ]]◆ In the second example, HelloWorld! Is printed when there is printHello() in the code\n[[ ]][[ ]]◆ In the first example, nothing happens since printHello() isn’t called"},{"type":"code","content":"def printHello():\n\tprint(\"HelloWorld!\")\n\nprintHello()","lang":"python"}]},{"type":"information","title":"Functions with Parameters","elements":[{"type":"text","content":"➔ Parameters are variables you can pass into the function\n➔ When calling the function, you put the actual value of the variable\n[[ ]][[ ]]◆ The first function call would print “Hello my name is Bob”\n[[ ]][[ ]]◆ The second function call would print “Hello my name is Joe”\n➔ Functions can also have multiple parameters\n[[ ]][[ ]]◆ “Hello my name is Bob Smith”"},{"type":"code","content":"def printName(name):\n\tprint(\"Hello name is \"+name)\n\nprintName(\"Bob\")\nprintName(\"Joe\")\n\ndef printName(firstName, lastName):\n\tprint(\"Hello my name is \"+firstName+\" \"+lastName)\n\nprintName(\"Bob\", \"Smith\")","lang":"python"}]},{"type":"information","title":"Functions with return values","elements":[{"type":"text","content":"➔ A function can return values\n[[ ]][[ ]]◆ In the previous examples, the functions did not have actual values\n[[ ]][[ ]]◆ return keyword gives the function an actual value\n➔ doubleNum(5) has a value of 10\n➔ mult(x, y)\n[[ ]][[ ]]◆ Another example of functions with return values\n[[ ]][[ ]]◆ x has a value of 35"},{"type":"code","content":"def doubleNum(x):\n\treturn x * 2\n\ndoubled = doubleNum(5)\n\ndef mult(x, y):\n\treturn x * y\n\nx = mult(5, 7)","lang":"python"}]},{"type":"information","title":"Introduction to Libraries","elements":[{"type":"text","content":"➔ What is a library?\n[[ ]][[ ]]◆ A library in python contains useful external python functionalities that are included in python unless you add the library to your code\n➔ How do you add a library?\n[[ ]][[ ]]◆ import keyword adds a library to your code\n➔ Library Examples\n[[ ]][[ ]]◆ Random, time (relatively standard libraries)\n[[ ]][[ ]]◆ Tensorflow, PyTorch (AI libraries)"},{"type":"code","content":"import random\nimport time","lang":"python"}]},{"type":"information","title":"Library: Random","elements":[{"type":"text","content":"➔ The random library allows you to generate random numbers\n➔ How to use?\n[[ ]][[ ]]◆ random.randint(start, end) returns a value between start and end (inclusive)\n➔ random.randint(1, 10) will return a random value between 1 and 10"},{"type":"code","content":"import random\n\nprint(random.randint(1, 10))","lang":"python"}]},{"type":"information","title":"Library: Time","elements":[{"type":"text","content":"➔ The time library is related to time in real life\n➔ Epoch - the point where time begins for computer systems\n[[ ]][[ ]]◆ January 1, 1970, 00:00:00 for Unix\n➔ time.time()\n[[ ]][[ ]]◆ Number of seconds since epoch\n➔ time.ctime([seconds since epoch])\n[[ ]][[ ]]◆ Outputs a readable time string some number of seconds after epoch that represents the time since epoch\n➔ Output looks like this\n[[ ]][[ ]]◆ Thu Dec 27 15:49:29 2018\n[[ ]][[ ]]◆ Sun Sep 12 21:01:30 2021"},{"type":"code","content":"import time\n\nsec = time.time()\n\nprint(time.ctime(sec))\n\nprint(time.ctime(1545925769.9618232))","lang":"python"}]}]}