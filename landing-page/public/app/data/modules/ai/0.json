{"type":"lesson","pages":[{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Why Python?[[/]]\n➔ One of the most popular introductory languages\n➔ Intuitive and readable with simple to traverse code\n➔ Ton of libraries for performing statistical analysis, machine learning, and more\n[[h3]]Python[[/]]"},{"type":"code","content":"a = [1, 2, 3, 2, 253, 0, 4, 3, 97]\nprint(sum(a))","float":"right","width":"50%"},{"type":"text","content":"[[h3]]C++[[/]]"},{"type":"code","content":"#include <iostream>\n#include <vector>\n#include <numeric>\n\nint main() {\n\tstd::vector<int> a = {1, 2, 3, 2, 253, 0, 4, 3, 97};\n\tstd::cout << std::accumulate(a.begin(), a.end(), 0) << std::endl;\n}","float":"left"},{"type":"text","content":"[[h3]]Inputs, Outputs, and Comments[[/]]\n➔ You can print values in Python using the print() method\n➔ To get an input, use the input() function as shown to the right\n➔ Comments are lines that are notes for you and don’t do anything; to add comments, use a # before the comment"},{"type":"code","content":"print(“This is how you print a sentence”)\n# The above lets us print a sentence\n\n# This is a comment\n\nName = input(“enter your name: “)\n# the above helps us takes in a name and store it in a variable called name","float":"left"}]},{"type":"multiple_choice","question":"Why is Python so great?","answers":["All of the above","Extremely Popular","Easy and redable syntax","Tons of libraries for AI, data science, and more"],"correct":0,"descriptions":["Correct! These are all what makes Python so good for learning and using","Incorrect! This option is correct, but what about some others?","Incorrect! This option is correct, but what about some others?","Incorrect! This option is correct, but what about some others?"],"points":5,"coins":1},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Object Types[[/]]\n➔ Assign variables using variable_name = value\n➔ Python automatically assigns types: Numbers, Booleans, Strings, Lists, and None\n➔ Create your own custom object types using classes!\n➔ Check the type of any variable using the type() function\n➔ Check if a type matches a variable using isinstance()"},{"type":"code","content":"# assign the variable `x` to the integer 1\nx = 1\n\n# checking the type of `x`\nprint(type(x))\n# will print int\n\n# verifying that `x` is an integer-type object\nprint(isinstance(x, int))\n# will print True","float":"left"}]},{"type":"multiple_choice","question":"How do you declare a variable in Python?","code_template":"var x = 1\nint x = 1\nx = 1","answers":["var x = 1","int x = 1","x = 1","None of the above"],"correct":2,"descriptions":["Incorrect! Python automatically knows variables","Incorrect! Python automatically assigns types","Correct, this is proper syntax","Incorrect!"],"points":5,"coins":1},{"type":"multiple_choice","question":"Which of the following are main Python Object types?","answers":["Booleans","Strings","List","All of the above"],"correct":3,"descriptions":["Incorrect! This option is correct, but what about some others?","Incorrect! This option is correct, but what about some others?","Incorrect! This option is correct, but what about some others?","Correct! These are all main Python Object types"],"points":5,"coins":1},{"type":"multiple_choice","question":"How would you create your own object type in Python","descriptions":["Incorrect!","Correct!","Incorrect! This does not create a new object","Incorrect!"],"points":5,"coins":1,"answers":["Recode Python","Make a class","use the type() function","Not Possible"],"correct":1},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Number Operators[[/]]\n➔ [[b]]x + y[[/]]: The sum of two numbers\n➔ [[b]]x - y[[/]]: The difference of two numbers\n➔ [[b]]x * y[[/]]: The product of two numbers\n➔ [[b]]x / y[[/]]: The quotient of two numbers\n➔ [[b]]x // y[[/]]: The quotient of two numbers rounded down to an integer\n➔ [[b]]x % y[[/]]: “modulo”, The remainder when x is divided by y\n➔ [[b]]x ** y[[/]]: x raised to the y power\n➔ [[b]]-x[[/]]: x in its negated form (-1 * x)\n➔ [[b]]abs(x)[[/]]: The absolute value of a number"}]},{"type":"multiple_choice","question":"How would you get the sum of two numbers in Python?","descriptions":["Correct!","Incorrect!","Incorrect!","Incorrect!"],"points":5,"coins":1,"answers":["x + y","x ++ y","x ^+ y","var x + var y"],"correct":0},{"type":"multiple_choice","question":"What does x // y do?","descriptions":["Incorrect!","Incorrect! That is a single division symbol","Correct!","Incorrect! That is a single division symbol"],"points":5,"coins":1,"answers":["Finds the root of x with y","Divides X and Y","Rounds the quotient of x and  y to an integer value","Finds the decimal value of the quotient of x and y"],"correct":2},{"type":"multiple_choice","question":"What does x % y do?","descriptions":["Incorrect! Wrong symbol","Correct!","Incorrect!","Incorrect! Wrong symbol"],"points":5,"coins":1,"answers":["Divides x and y","Finds the remainder of x / y","Finds decimal points of x /  y","Rounds the quotient of x and y to the nearest hundredth."],"correct":1},{"type":"multiple_choice","question":"What does x ** y do?","descriptions":["Incorrect!","Incorrect! That is a single multiplcation sign","Incorrect!","Correct!"],"points":5,"coins":1,"answers":["Adds x * y by itself.","Multiplies x by y","Rounds the value of x * y by the tens place.","Raises X to the Y power."],"correct":3},{"type":"multiple_choice","question":"How do you find the absolute value of a number x in Python?","descriptions":["Incorrect!","Incorrect!","Correct!","Incorrect!"],"points":5,"coins":1,"answers":["absolute(x)","absolueVal(x)","abs(x)","absoluteValue(x)"],"correct":2},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Logical/Boolean Operators[[/]]\n➔ [[b]]x == y[[/]]: returns true if x is equivalent to y\n➔ [[b]]x != y[[/]]: returns true if x is not equivalent to y\n➔ [[b]]x > y[[/]] and [[b]]x >= y[[/]]: returns true if x is greater than y, and returns true if x is greater than or equal to y\n➔ [[b]]x < y[[/]] and [[b]]x <= y[[/]]: returns true if x is less than y, and returns true if x is less than or equal to y\n➔ [[b]]or[[/]]: returns true if either statement to its left or right is true\n➔ [[b]]and[[/]]: returns true if both statements to its left and right are true"},{"type":"code","content":"x = 1\ny = 2\n\nprint(x == y)\n# false\nprint(x != y)\n# true\nprint(x > y)\n# false\nprint(x <= y)\n# true\nprint(x <= y or x != y)\n# true\nprint(x <= y and x != y)\n# true","float":"left"}]},{"type":"multiple_choice","question":"What does x != y return?","descriptions":["Incorrect! It won't have \"!\"","Incorrect!","Incorrect! It won't have \"!\"","Correct!"],"points":5,"coins":1,"answers":["True if x is equal to y","False if x is equal to y","False if x is NOT equal to y.","True if x is NOT equal to y."],"correct":3},{"type":"multiple_choice","question":"What Does x == y return if x is the same value as y?","descriptions":["Correct!","Incorrect!"],"points":5,"coins":1,"answers":["True","False","",""],"correct":0},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Sequence Operators[[/]]\n➔ Python has many built-in functions for working with sequences\n➔ Access a value at index (first is 0): [[b]]sequence[index][[/]]\n➔ Check if an object is contained within a sequence: [[b]]obj in seq[[/]]\n➔ Concatenating sequences: [[b]]seq1 + seq2[[/]]\n➔ Asking for the number of items in a sequence: [[b]]len(seq)[[/]]\n➔ Getting the index of the first occurrence of x in a sequence: [[b]]seq.index(x)[[/]]\n➔ Counting the number of occurrences of x in a sequence: [[b]]seq.count(x)[[/]]\n➔ Access a value at index for a 2D-array (list within a list): [[b]]seq[index1][index2][[/]]"},{"type":"code","content":"seq1 = [\"a\", 2, 9, None]\nseq2 = [\"WHAT\", 1, 1, 3]\n\nprint(\"a\" in seq1)\n# True\nprint(seq1 + seq2)\n# [“a”, 2, 9, None, “WHAT”, 1, 1, 3]\nprint(seq1*2)\n# [“a”, 2, 9, None, “a”, 2, 9, None]\nprint(len(seq2))\n# 4\nprint(seq1.index(9))\n# 2\nprint(seq2.count(1))\n# 2"}]},{"type":"multiple_choice","question":"What number index does a sequence start at?","descriptions":["Correct!","Incorrect!"],"points":5,"coins":1,"answers":["0","1","",""],"correct":0},{"type":"multiple_choice","question":"True Or False: Ordering in Sequences Matter","descriptions":["Correct!","Incorrect! They are very important"],"points":5,"coins":1,"answers":["True","False","",""],"correct":0},{"type":"multiple_choice","question":"True of False: Values of tuples can be changed after initiated.","descriptions":["Incorrect!","Correct!"],"points":5,"coins":1,"answers":["True","False","",""],"correct":1},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Sequence Operators[[/]]\n➔ Python has many built-in functions for working with sequences\n➔ Access a value at index (first is 0): [[b]]sequence[index][[/]]\n➔ Check if an object is contained within a sequence: [[b]]obj in seq[[/]]\n➔ Concatenating sequences: [[b]]seq1 + seq2[[/]]\n➔ Asking for the number of items in a sequence: [[b]]len(seq)[[/]]\n➔ Getting the index of the first occurrence of x in a sequence: [[b]]seq.index(x)[[/]]\n➔ Counting the number of occurrences of x in a sequence: [[b]]seq.count(x)[[/]]\n➔ Access a value at index for a 2D-array (list within a list): [[b]]seq[index1][index2][[/]]"},{"type":"code","content":"seq1 = [\"a\", 2, 9, None]\nseq2 = [\"WHAT\", 1, 1, 3]\n\nprint(\"a\" in seq1)\n# True\nprint(seq1 + seq2)\n# [“a”, 2, 9, None, “WHAT”, 1, 1, 3]\nprint(seq1*2)\n# [“a”, 2, 9, None, “a”, 2, 9, None]\nprint(len(seq2))\n# 4\nprint(seq1.index(9))\n# 2\nprint(seq2.count(1))\n# 2"}]},{"type":"multiple_choice","question":"How would you concatenate two sequences x and y?","descriptions":["Incorrect! \"seq\" is not required","Incorrect!","Correct!"],"points":5,"coins":1,"answers":["seq x + seq y","x.addSeq(y)","x + y",""],"correct":2},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Python Control Flow[[/]]\n➔ Control flow is the order in which our program is executed\n➔ We can achieve control flow using functions, loops and if-then statements\n➔ Python uses whitespaces to delineate when some block of code ends rather than end statements or curly braces"},{"type":"image","src":"./data/modules/ai-assets/img0/0-0.png","width":"50%"}]},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Conditionals[[/]]\n➔ In Python, there are three basic kinds of conditionals\n➔ [[b]]if[[/]]: executes a block of code if a condition is true; does not need to eb paired with else or elif\n➔ [[b]]else[[/]]: Must be paired with an if; executes some code if the condition with the paired if block was false\n➔ [[b]]elif[[/]]: Must be paired with an if (does not require an else); executes some code if the condition with the paired block was false AND a second given condition was met"},{"type":"code","content":"eq = [\"a\", 2, 9, None]\n\nif \"a\" in seq1:\n\tprint(\"entered the if\")\n\nif 2 in seq1:\n\tprint(\"entered the 2nd if\")\n\nelse:\n\tprint(\"entered the else\")\n\n# entered the if\n # entered the 2nd if\n\nif \"a\" in seq1:\n\tprint(\"entered the if\")\n\nelif 2 in seq1:\n\tprint(\"entered the elif\")\n\nelse:\n\tprint(\"entered the else\")\n\n# entered the if"}]},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Loops[[/]]\n➔ In Python, there are two types of loops\n➔ A for loop iterates over a range of numbers or the elements of a sequence\n➔ The [[b]]range()[[/]] function provides the requirements for a for loop\n➔ A while loops runs as long as the given condition is true\n➔ [[b]]Be careful not to run infinte loops in your program other than very specific exceptions[[/]]"},{"type":"code","content":"fruits = [\"mango\", \"orange\", \"apple\"]\nfor x in fruits:\n\tprint(x)\n# mango\n# orange\n# apple\n\nfor i in range(5):\n\tprint(i)\n# 0\n# 1\n# 2\n# 3\n# 4\nj = 0\nwhile len(fruits) > j:\n\tj+=1\n# j++ is a shortcut for j = j + 1\n# The final value of j is 3"}]},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Functions[[/]]\n➔ In Python, functions are a way of writing some code within a block so it can be reused by calling the function's name\n➔ You can define a Python function with the following syntax:\n[[b]]def function_name(any, parameters, go, here):[[/]]\n    [[b]]Function body goes here[[/]]\n    [[b]]Optional return statement[[/]]\n➔ Note that all code in a function must be indented, and to stop coding in the function, you must unindent your code, like a loop\n➔ A return statement stops the other lines of the function from running and sends a value up to the function that called it"},{"type":"code","content":"def is_true(x):\nif(x == True):\n\treturn True\nreturn False\n\nif is_true(\"Test\"):\n\tprint(\"The function returned true!\")\nif is_true(\"Nah\"):\n\tprint(\"The function returned true!\")\nif is_true(True):\n\tprint(\"The function returned true!\")"}]},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Object Oriented Programming (OOP)[[/]]\n➔ In Python, Class and Type mean the same thing (Since Python 2.2)\n➔ A class is a container for two things - attributes and methods\n➔ Attributes are variables or properties that a class can access and use\n➔ Methods are functions within a class that the class can access and use\n➔ We can use [[b]]instances[[/]] of classes to create objects\n➔ Think of a class as a blueprint and an object as the actual building"},{"type":"image","src":"./data/modules/ai-assets/img0/1-0.png","width":"50%"}]},{"type":"information","title":"Week 1 - Python Review","elements":[{"type":"text","content":"[[h3]]Defining Classes[[/]]\n➔ To define a class, start with the keyword class and the name you want to give the class\n➔ Then, you can enter methods and attributes inside the class\n➔ The [[b]]__init__()[[/]] method is a special method that defines how to initialize the class and if any parameters(like functions and classes can have parameters) are needed\n➔ [[b]]self[[/]] refers to an instance of the class, and you must include it in [[b]]__init__()[[/]] to set attributes from parameters"},{"type":"code","content":"# Define a dog with an attribute x of 3000\n# And gender and parameters as attributes\nclass Dog:\n\tx = 3000\ndef __init__(self, age, gender):\n\tself.gender = gender\n\tself.age age\n\ndef print_x():\n\tprint(self.x)\n\ndog = Dog(10, \"Male\")\n\nprint(dog.x)\n# 3000\n\nprint(dog.age)\n# 10\n\ndog.print_x()\n# 3000"}]}]}