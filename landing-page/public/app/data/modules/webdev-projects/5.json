{"type":"project","pages":[{"type":"information","title":"Week 6 Project - Express.JS","elements":[{"type":"text","content":"➔ Create API endpoints for the helper functions you created in the previous project\n➔ For instance, create an endpoint called “/add” and add 2 numbers given to you in the request body (hint: the requests are POST requests)\n➔ Then call that API endpoint using axios and use the helper function like a module\n➔ Create some more API endpoints for GET requests which send data to a web page such as some text, etc.\n➔ Once again, use axios for all your requests"}]},{"type":"information","title":"Setup your workspace","elements":[{"type":"text","content":"[[h3]]Important note: This project requires a [[link=https://replit.com]]replit[[/link]] account. [[/]]\n➔ First, update your package.json to include ‘express’ and ‘body-parser’ as a dependency\n➔ Next, run [[`]]npm install[[/]]\n➔ Lastly, create an file named “index.js”\n➔ To create the server, follow the code from the slides, but it’s also included below for your convenience"},{"type":"image","src":"./data/modules/webdev-projects-assets/img5/0-0.png","width":"30%"},{"type":"code","content":"const express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(bodyParser.json());\napp.listen(PORT, () => console.log(`Server is running on port ${PORT}`));","name":"index.js","lang":"javascript"}]},{"type":"information","title":"Creating your first endpoint","elements":[{"type":"text","content":"➔ To receive data, let’s first create a POST endpoint. To do this, use \n➔ [[`]]app.post(“/add”, (req, res) => {})[[/]] - This will be our add function endpoint\n➔ Inside this function, we’ll get the data with an if statement checking if “req.body.number1” and “req.body.number2” are present. If they aren’t then let’s send an error message with [[`]]return res.status(400).send(“The numbers aren’t present!”)[[/]]\n➔ Next, let’s also check if both of them are real numbers\n➔ Finally, if all of the checks pass, then either use our library that we created in week 5, or [[`]]return res.status(200).send(req.body.number1+req.body.number2)[[/]]\n➔ In case you’re wondering, the res.status(num) is an indicator to the client of the status of the request. \n[[ ]][[ ]]◆ In general, numbers that start with 200 mean successful, numbers that start with 400 mean bad request, and numbers that start with 500 mean internal server error."}]},{"type":"information","title":"index.js - Server Code","elements":[{"type":"code","content":"const express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst mathFunctions = require(\"Your NPM package (created in week 5)\")\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(bodyParser.json());\napp.listen(PORT, () => console.log(`Server is running on port ${PORT}`));","name":"importing modules and server"},{"type":"code","content":"app.post(\"/add\", (req, res) => {\n\ttry {\n\tvar result = mathFunctions.add(req.body.number1, req.body.number2);\n\treturn res.send(result.toString());\n\t} catch (err) {\n\treturn res.status(400).send(err.toString());\n\t}\n})","name":"\"add\" endpoint"},{"type":"code","content":"app.post(\"/subtract\", (req, res) => {\n\ttry {\n\tvar result = mathFunctions.subtract(req.body.number1, req.body.number2);\n\treturn res.send(result.toString());\n\t} catch (err) {\n\treturn res.status(400).send(err.toString());\n\t}\n})","name":"\"subtract\" endpoint"},{"type":"code","content":"app.multiply(\"/subtract\", (req, res) => {\n\ttry {\n\tvar result = mathFunctions.multiply(req.body.number1, req.body.number2);\n\treturn res.send(result.toString());\n\t} catch (err) {\n\treturn res.status(400).send(err.toString());\n\t}\n})","name":"\"multiply\" endpoint"},{"type":"code","content":"app.post(\"/divide\", (req, res) => {\n\ttry {\n\tvar result = mathFunctions.divide(req.body.number1, req.body.number2);\n\treturn res.send(result.toString());\n\t} catch (err) {\n\treturn res.status(400).send(err.toString());\n\t}\n})","name":"\"divide\" endpoint"}]},{"type":"information","title":"Client code","elements":[{"type":"text","content":"➔ To interact with the server, we can use axios, a javascript library to make requests to our server. \n[[ ]][[ ]]◆ In the browser, NPM modules are supported, so you may want to consider using “fetch,” which is supported by default\n➔ We can create a helper function that makes an API call to our server. It will need to be an async function, since we don’t know when the request will finish.\n➔ Like before, first import axios and then make a POST request to our server with number1 and number2 getting values from the function parameters."},{"type":"code","name":"nodeclient.js","content":"async funtion makeAddRequest(number1, number2) {\n\tconst axios = require(\"axios\");\n\tlet results = await axios.post(\"http://localhost:3000/add\", {\n\tnumber1: number1,\n\tnumber2: number2\n\t})\n\treturn results;\n}\nmakeAddRequest(12, 50).then(results => console.log(results));"}]},{"type":"information","title":"Going further","elements":[{"type":"text","content":"➔ We could also do many more things with express.js servers! Such as showing server time, templating with EJS, and many more things. For the time being, let’s stick with creating a GET endpoint that tells the user the Unix timestamp.\n➔ First, create a GET endpoint with app.get(“/time”, (req, res) => {})\n➔ Next, use return Date.now().toString() to send the current Unix timestamp as a string\n[[ ]][[ ]]◆ Note! Express.JS does NOT allow you to send a number as a response. This is why we have the “.toString()” function attached to it. "},{"type":"code","content":"app.get(\"/time\", (req, res) => {\n\treturn res.send(Date.now().toString());\n})"}]},{"type":"information","title":"Going even further","elements":[{"type":"text","content":"Let's create a little front end website that lets us send a GET request to any server\n➔ First, in your HTML file, import [[`]]<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>[[/]]\n[[ ]][[ ]]◆ This will give us access to the axios module."},{"type":"code","content":"<!DOCTYPE html>\n<html>\n\t<head>\n\t<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n\t</head>\n\t<body>\n\t<input id=\"url\" type=\"text\" placeholder=\"URL\">\n\t<button onclick=\"sendRequest()\">Sbumit!</button>\n\t<div id=\"result\"></div>\n\t</body>\n</html>\n<script>\n\tfunction sendRequest() {\n\taxios.get(document.getElementById(\"url\").value).then(result => {\n\t\tdocument.getElementById(\"result\").innerHTML = result;\n\t})\n\t}\n</script>","lang":"html"}]},{"type":"information","title":"CORS (Cross Origin Resource Sharing)","elements":[{"type":"text","content":"If you're a frontend web dev, you've most likely seen this message:"},{"type":"image","src":"./data/modules/webdev-projects-assets/img5/1-0.png"},{"type":"text","content":"(pain)\n➔ So what is CORS? Well CORS is a thing that keeps the internet safe. It blocks requests from domains that are not it’s own.\n➔ If, for some reason, you wanted to allow requests from all domains to your server, you first need another package: “cors”, and then import it into your program. Then, [[`]]app.use(cors())[[/]]\n➔ If you would like to allow cors for a \n➔ specific domain, use [[`]]app.use(cors({origin: “yourdomain”}))[[/]]"},{"type":"code","content":"var express = require(\"express\");\nvar cors = require(\"cors\");\nvar app = express(); \n\n app.use(cors())","lang":"javascript"}]}]}