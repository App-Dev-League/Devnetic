{"type":"lesson","pages":[{"type":"information","title":"Why Python?","elements":[{"type":"text","content":"➔ One of the most popular programming languages\n➔ Intuitive and readable with simple to traverse code\n➔ Ton of libraries for performing statistical analysis, machine learning, and more"},{"type":"code","content":"a = [1,2,3,4,5,21,0,2]\nprint(sum(a))","name":"Python","lang":"python"},{"type":"divider"},{"type":"code","content":"#include <iostream>\n#include <vector>\n#include <numeric>\n\nint main() {\n\tstd::vector<int> v = {1,2,3,4,5,21,0,2};\n\tstd::cout << std::accumulate(v.begin(), v.end(), 0) << std::endl;\n}","name":"C++","lang":"cpp"}]},{"type":"information","title":"Run Code","elements":[{"type":"text","content":"➔ We will run our python code in the Devnetic IDE\n➔ To get started, navigate [[link=#/my-projects]]here[[/link]] and click the 'plus' icon\n➔ You can also choose to use [[link=https://replit.com]]Repl.it[[/link]] to run your code too!\n➔ Repl.it is an online IDE (Integrated Development Environment), which means we can edit our code, as well as run it in the same place\n➔ Follow this [[link=https://docs.google.com/document/d/1-03BHDJsjcR7rTcVrzvgkynDeObkORQ5k1bdO63Xo6U/edit?usp=sharing]]document[[/link]] to get started with Repl"}]},{"type":"information","title":"Basic Syntax of Python","elements":[{"type":"text","content":"➔ “#” character to write comments\n[[ ]][[ ]]◆ Good for complex code\n➔ ‘’’ for multi-line comments‘’’\n➔ print() to print something to the console\n➔ The console is where the program is ran\n[[ ]][[ ]]◆ Output will be produced there"},{"type":"code","content":"# This is a comment\n\n'''\nThis is a \nmulti-line comment\n'''\n\nprint(\"5\")\n# 5 is printed to the console"}]},{"type":"information","title":"Running Python","elements":[{"type":"text","content":"➔ To run your code, click the green run button at the top\nYou may need to navigate to the plugins panel and install Brython\n➔ This will produce the output of the code to the console, on the right"},{"type":"image","src":"./data/modules/intro-to-cs-assets/img0/0-0.png"}]},{"type":"information","title":"Python Variables","elements":[{"type":"text","content":"➔ Assign variables using variable_name = value\n➔ “=” character assigns the value to a variable, does not mean equals\n➔ Variables store a value of any type\n➔ Python assigns types automatically, the main object types (next slide)\n➔ Check the type of any variable using the type() function\n➔ Check if a type matches a variable using isinstance()"},{"type":"code","content":"# assign the variable 'x' to the integer 1\nx = 1\n\n# checking the type of 'x'\nprint(type(x))\n# will print int\n\n# verifying that 'x' is an integer-type object\nprint(isinstance(x, int))\n# will print True"}]},{"type":"information","title":"Object Types","elements":[{"type":"text","content":"➔ Numbers - two types of numbers, int and float\n➔ Int can hold integer numbers, and float holds decimals\n➔ Python will automatically distinguish the two and assign them based on your number\n➔ Booleans - Holds a value of true or false\n➔ Strings - Sequence of characters\n➔ Lists - Holds multiple values in the same variable, can be of different types\n[[ ]][[ ]]◆ Ex. a list can contain numbers, and strings"},{"type":"code","content":"x = 5 # number\n\nx = False # boolean\n\nx = \"Hello\" # string\n\nx = [1, 2, 3] # list"}]},{"type":"information","title":"Casting","elements":[{"type":"text","content":"➔ You can cast different variable types to another\n➔ Ex. making a string into an int or vice versa\n[[ ]][[ ]]◆ Only certain things in each data type can be casted\n[[ ]][[ ]][[ ]][[ ]]● Ex: string numbers can only be casted to ints, single letters/number strings can be converted to chars, only ints can be converted to chars, etc\n➔ Each data type has a specific data type that does the casting\n[[ ]][[ ]]◆ Use ascii table to see what chars cast to: [[link=https://www.ascii-code.com]]ascii[[/link]] "},{"type":"code","content":"str(23)\n# '23'\nint('43')\n# 43\nint('string')\n# creates an error\nchar(43)\n# '+'\nfloat(43)\n# 43.0"}]},{"type":"information","title":"Mathematical Operators","elements":[{"type":"text","content":"➔ [[`]]x + y[[/]]: The sum of two numbers\n➔ [[`]]x - y[[/]]: The difference of two numbers\n➔ [[`]]x * y[[/]]: The product of two numbers\n➔ [[`]]x / y[[/]]: The quotient of two numbers\n➔ [[`]]x // y[[/]]: The quotient of two numbers rounded down to an integer\n➔ [[`]]x % y[[/]]: “modulo”, The remainder when x is divided by y\n➔ [[`]]x ** y[[/]]: x raised to the y power\n➔ [[`]]abs(x)[[/]]: The absolute value of a number"},{"type":"code","content":"x = 1\ny = 2\nprint(x+y)\nprint(x-y)\nprint(x**y)\nprint(x%y)","lang":"python"}]},{"type":"information","title":"Order of Operations","elements":[{"type":"text","content":"➔ Order of operations is mostly same as math\n➔ Parenthesis, Exponents, Multiplication, Division, Addition, Subtraction, Assignment Operator “=”\n➔ “=” will be used last, so the entire expression happens, then number is assigned to variable"}]},{"type":"information","title":"Logical/Boolean Operators","elements":[{"type":"text","content":"➔ [[`]]x == y[[/]]: Returns true if x is equivalent to y\n➔ [[`]]x != y[[/]]: Returns true if x is not equivalent to y \n➔ [[`]]x > y[[/]] and [[`]]x >= y[[/]]: Returns true if x is more than and more than or equal to y, respectively\n➔ [[`]]x < y[[/]] and [[`]]x <= y[[/]]: Returns true if x is less than and less than or equal to y, respectively\n➔ [[`]]or[[/]]: returns true if either statement to its left and right is true\n➔ [[`]]and[[/]]: Returns true if both statements to its left and right are true"},{"type":"code","content":"x = 1\ny = 2\n\nprint(x == y)\n# False\nprint(x != y)\n# True\nprint(x > y)\n# False\nprint(x <= y)\n# True\nprint(x >= y or x != y)\n# If one statement is true, the whole expression is true\nprint(x >= y and x != y)\n# If one statement is false, the whole expression is false","lang":"python"}]},{"type":"information","title":"Sequences","elements":[{"type":"text","content":"➔ Objects that store a finite collection of objects whose ordering matters\n➔ Sequence indices start at [[b]]0, not 1[[/]]\n➔ 3 main types of sequences in Python:\n[[ ]][[ ]]◆ Lists: A container that holds [[b]]multiple values[[/]]\n[[ ]][[ ]]◆ Strings: A sequence of [[b]]characters[[/]]\n[[ ]][[ ]]◆ Tuples: A container that holds multiple values that [[b]]cannot be changed[[/]] after initializing"},{"type":"code","content":"# retrieve values of sequence by accessing through index\n# remember: sequence indices start at 0, not 1\n\nmy_list = [\"a\", 1, 1, 3, None]\nprint(my_list[0])\n# a\n\nmy_string = \"hello\"\nprint(my_string[0])\n# h\n\nmy_tuple = (\"yes\", \"no\", \"maybe\")\nprint(my_tuple[0])\n# yes","lang":"python"}]},{"type":"information","title":"Sequence Operators","elements":[{"type":"text","content":"➔ Python has many built-in functions for working with sequences\n[[ ]][[ ]]◆ Check if an object is contained within a sequence: [[`]]obj in seq[[/]]\n[[ ]][[ ]]◆ To get list element at index: [[`]]seq[x][[/]]\n[[ ]][[ ]]◆ To get length of list: [[`]]len(seq)[[/]]\n[[ ]][[ ]]◆ Concatenating sequences: [[`]]seq1 + seq2[[/]]\n[[ ]][[ ]]◆ Repeated concatenation of a sequence: [[`]]n*seq1 or seq1*n[[/]]\n[[ ]][[ ]]◆ Asking for the number of members in a sequence: [[`]]len(seq)[[/]]\n[[ ]][[ ]]◆ Getting the index of the first occurrence of x in a sequence: [[`]]seq.index(x)[[/]]\n[[ ]][[ ]]◆ Counting the number of occurrences of x in a sequence: [[`]]seq.count(x)[[/]]"},{"type":"code","content":"seq1 = [\"a\", 2, 9, None]\nseq2 = [\"WHAT\", 1, 1, 3]\n\nprint(\"a\" in seq1)\n# True\nprint(seq1+seq2)\n# [\"a\", 2, 9, None, \"WHAT\", 1, 1, 3]\nprint(seq1*2)\n# [\"a\", 2, 9, None, \"a\", 2, 9, None]\nprint(len(seq2))\n# 4\nprint(seq1.index(9))\n# 2\nprint(seq2.count(1))\n# 2","lang":"python"}]},{"type":"information","title":"Sequence Operators (pt. 2)","elements":[{"type":"text","content":"➔ Sequences can contain sequences (referred to as 2-dimensional)\n[[ ]][[ ]]◆ To access an element, first access the index of the inside sequence, and then access the index of that sequence: [[`]]seq[x][y][[/]]\n[[ ]][[ ]]◆ To get length of inner sequence: [[`]]len(seq[x])[[/]]\n[[ ]][[ ]]◆ Concatenating inner sequences: [[`]]seq[0] + seq[1][[/]]\n[[ ]][[ ]]◆ Repeated concatenation of inner sequence: [[`]]n*seq[x][[/]]\n[[ ]][[ ]]◆ Asking for number of members in inner sequence: [[`]]len(seq[x])[[/]]\n[[ ]][[ ]]◆ Getting index of the first occurrence of y in inner sequence: [[`]]seq[x].index(y)[[/]]\n[[ ]][[ ]]◆ Counting the number of occurrences of y in inner sequence: [[`]]seq[x].count(y)[[/]]"},{"type":"code","content":"seq = [ [\"a\", 2, 9, None][\"WHAT\", 1, 1, 3] ]\n\nprint(seq[0][1])\n# 2\nprint(len(seq[1]))\n# 4\nprint(seq[0] + seq[1])\n# [\"a\", 2, 9, None, \"WHAT\", 1, 1, 3]\nprint(seq[0]*2)\n# [\"a\", 2, 9, None, \"a\", 2, 9, None,]\nprint(len(seq[1]))\n# 4\nprint(seq[1].index(3))\n# 3\nprint(seq[1].count(1))\n# 2","lang":"python"}]},{"type":"information","title":"String Concatenation","elements":[{"type":"text","content":"➔ Strings are basically arrays of characters\n[[ ]][[ ]]◆ This means that we can basically use sequence operators on strings\n[[ ]][[ ]]◆ To get character at index: [[`]]string[x][[/]]\n[[ ]][[ ]]◆ To get length of string: [[`]]len(string)[[/]]\n[[ ]][[ ]]◆ Check if an object is contained within a string: [[`]]obj in string[[/]]\n[[ ]][[ ]]◆ Concatenating strings: [[`]]string1 + string2[[/]]\n[[ ]][[ ]]◆ Repeated concatenation of a string: [[`]]n*string1 or string1*n[[/]]\n[[ ]][[ ]]◆ Asking for the number of members in a string: [[`]]len(string)[[/]]\n[[ ]][[ ]]◆ Getting the index of the first occurrence of x in a string: [[`]]string.index(x)[[/]]\n[[ ]][[ ]]◆ Counting the number of occurrences of x in a string: [[`]]string.count(x)[[/]]"},{"type":"code","content":"string1 = \"banana\"\nstring2 = \"App Dev League teaches tons of things\"\n\nprint(a in string1)\n# True\nprint(string1 + string2)\n# bananaApp Dev League teaches tons of things\nprint(string1*2)\n# bananabanana\nprint(len(string1))\n# 6\nprint(string1.index(\"a\"))\n# 1\nprint(string2.index(\"a\"))\n# 10","lang":"python"}]},{"type":"information","title":"Input","elements":[{"type":"text","content":"➔ Get user input through command line when you run the program\n[[ ]][[ ]]◆ Syntax: [[`]]input(“String that user will see when prompted to type something”)[[/]]\n➔ You must assign the input to a variable, which you can use or edit\n➔ When using inputs, wrap the input command around parenthesis and specify the type, if you don’t want it to be a string\n[[ ]][[ ]]◆ Ex. [[`]]x = int(input(“Type a number”))[[/]]"},{"type":"code","content":"#Takes in a string\nx = input(\"Give a description of the data asked for\")\n\n#Takes in an int\ny = int(input(\"Give a number\"))\n\n#Takes in a char\nz = char(input(\"Give a character\"))\n\n#Takes in a float\na = float(input(\"Give a decimal number\"))\n\n#We have to convert y to a string since pritn can't have multiple data types\nprint(str(y)+\" other stuff\")\n\n#Since only w is being printed, ther eis only one data type in the print command\nprint(w)","lang":"python"}]}]}